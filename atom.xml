<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shaop的博客</title>
  <subtitle>better</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="shaop.github.io/"/>
  <updated>2017-10-26T14:17:29.000Z</updated>
  <id>shaop.github.io/</id>
  
  <author>
    <name>shaop</name>
    <email>sxp644645107@gamil.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>组件化之路探索：CocoaPods 私有 pods 搭建</title>
    <link href="shaop.github.io/2017/10/19/%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B9%8B%E8%B7%AF%E6%8E%A2%E7%B4%A2%EF%BC%9ACocoaPods%20%E7%A7%81%E6%9C%89%20pods%20%E6%90%AD%E5%BB%BA/"/>
    <id>shaop.github.io/2017/10/19/组件化之路探索：CocoaPods 私有 pods 搭建/</id>
    <published>2017-10-19T14:45:21.000Z</published>
    <updated>2017-10-26T14:17:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了 n 多的组件化的方案之后，基本所有的方案都指向是有 CocoaPods 进行组件化构建。因此，本篇记录使用 CocoaPods 搭建私有 pods 的过程。</p>
<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>搭建私有 pod 步骤一般分为以下：</p>
<ol>
<li>搭建私有的 PodSpesc 仓库</li>
<li>创建私有的组件库</li>
<li>配置私有的组件库</li>
<li>上传版本与版本管理</li>
<li>加入到私有 PodSpesc 仓库</li>
</ol>
<h2 id="搭建私有的-PodSpesc-仓库"><a href="#搭建私有的-PodSpesc-仓库" class="headerlink" title="搭建私有的 PodSpesc 仓库"></a>搭建私有的 PodSpesc 仓库</h2><p>在搭建仓库之前，我们需要在 git 上创建一个仓库。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1509026311831.png" width="404"></p>
<blockquote>
<p>注意授权许可选择 <code>MIT Licenese</code> </p>
</blockquote>
<p>创建完成之后之后输入以下命令进行 PodSpesc 仓库的创建</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo add [REPO_NAME(仓库名字)] [SOURCE_URL(git的地址)]</div></pre></td></tr></table></figure>
<p>创建完成之后，在本地的 <code>/Users/username/.cocoapods/repos/</code> 目录下就会出现刚刚创建的 PodSpesc 仓库。</p>
<h2 id="创建私有的组件库"><a href="#创建私有的组件库" class="headerlink" title="创建私有的组件库"></a>创建私有的组件库</h2><p>在创建完私有的 PodSpesc 仓库之后，就要开始创建我们私有的组件库了。</p>
<blockquote>
<p>这里同样需要在 git 上创建仓库，不再重复。默认在git目录下操作。</p>
</blockquote>
<p>创建组件库的方式有很多，这里推荐 CocoaPods 自带的创建方式，使用如下命令</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib create XXXKit</div></pre></td></tr></table></figure>
<p>后续有一系列选择，试实际需求确定。</p>
<p>创建完成之后，一般情况下的目录结构如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">XXXKit</div><div class="line">  ├── .travis.yml</div><div class="line">  ├── _Pods.xcproject</div><div class="line">  ├── Example</div><div class="line">  │   ├── XXXKit</div><div class="line">  │   ├── XXXKit.xcodeproj</div><div class="line">  │   ├── XXXKit.xcworkspace</div><div class="line">  │   ├── Podfile</div><div class="line">  │   ├── Podfile.lock</div><div class="line">  │   ├── Pods</div><div class="line">  │   └── Tests</div><div class="line">  ├── LICENSE</div><div class="line">  ├── XXXKit.podspec</div><div class="line">  ├── Pod</div><div class="line">  │   ├── Assets</div><div class="line">  │   └── Classes</div><div class="line">  │     └── RemoveMe.[swift/m]</div><div class="line">  └── README.md</div></pre></td></tr></table></figure>
<p>至此，已经完成私有组件的创建</p>
<h2 id="配置私有的组件库"><a href="#配置私有的组件库" class="headerlink" title="配置私有的组件库"></a>配置私有的组件库</h2><p>组件库的配置主要是配置 <code>.podspec</code> 文件，使用 CocoaPods 创建的内容一般都包括了主要需要的配置项。在此列举。</p>
<ul>
<li><strong>name</strong> ：库的名字</li>
<li><strong>version</strong>：当前库的版本，需要对应 git 的 tag 号</li>
<li><strong>summary</strong>：简介</li>
<li><strong>description</strong>：描述，需要在<code>&lt;&lt;-DESC</code> 和 <code>DESC</code>中间填入描述</li>
<li><strong>homepage</strong>：项目的官方首页</li>
<li>screenshots：预览图</li>
<li><strong>license</strong>：许可描述</li>
<li><strong>author</strong>：作者描述</li>
<li><strong>source</strong>：源码地址，即 git 地址</li>
<li>social_media_url： 作者的媒体方式，例如微博，twitter</li>
<li><strong>deployment_target</strong>：iOS 的支持版本</li>
<li><strong>source_files</strong>：pod 中的源码通配符地址</li>
<li>resource_bundles：资源通配符地址</li>
<li>public_header_files：头文件的通配符地址，用在闭源环境下</li>
<li>frameworks：使用的frameworks，例如 <code>UIKit</code></li>
<li>dependency：项目的依赖，可以加入类似 <code>AFNetworking</code> 等依赖，在别的工程 <code>pod install</code> 时会自动加入这些依赖</li>
</ul>
<p>粗体的配置完成之后在该工程目录下输入以下命令来进行库的验证</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div></pre></td></tr></table></figure>
<h2 id="上传版本与版本管理"><a href="#上传版本与版本管理" class="headerlink" title="上传版本与版本管理"></a>上传版本与版本管理</h2><p>私有库的版本在 git 中使用 tag 来进行管理的</p>
<p>这里的逻辑是在源码版本 push 后，再打入 tag 。命令如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git push origin master //这里的 push 是提交版本源码</div><div class="line">$ git tag '1.0.0' //这里的 tag 必须和上面提交的源码中的 .podspec 文件中的 version 相同</div><div class="line">$ git push --tags</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<h2 id="加入到私有-PodSpesc-仓库"><a href="#加入到私有-PodSpesc-仓库" class="headerlink" title="加入到私有 PodSpesc 仓库"></a>加入到私有 PodSpesc 仓库</h2><p>确定无误之后，即可加入先前建立的 PodSpesc 仓库了，在组件库中输入以下命令</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo push [PodSpescName(仓库的名字)] [XXXKix.podspec(目录下的 .podspec)]</div></pre></td></tr></table></figure>
<h2 id="测试可用"><a href="#测试可用" class="headerlink" title="测试可用"></a>测试可用</h2><p>建立项目，创建 Podfile 和平时不同的是，需要在文件的最开头输入以下的 code</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source &apos;http://xxxx.xxx/XXXX/XXXPodSpesc.git&apos;</div><div class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;</div></pre></td></tr></table></figure>
<p>指明需要的库，否则 CocoaPod 无法找需要需要的库</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了 n 多的组件化的方案之后，基本所有的方案都指向是有 CocoaPods 进行组件化构建。因此，本篇记录使用 CocoaPods 搭建私有 pods 的过程。&lt;/p&gt;
&lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于 autoreleasepool 在 64 位与 32 位下的引用区别</title>
    <link href="shaop.github.io/2017/10/12/%E5%85%B3%E4%BA%8E%20autoreleasepool%20%E5%9C%A8%2064%20%E4%BD%8D%E4%B8%8E%2032%20%E4%BD%8D%E4%B8%8B%E7%9A%84%E5%BC%95%E7%94%A8%E5%8C%BA%E5%88%AB/"/>
    <id>shaop.github.io/2017/10/12/关于 autoreleasepool 在 64 位与 32 位下的引用区别/</id>
    <published>2017-10-11T16:34:14.000Z</published>
    <updated>2017-10-26T14:17:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在阅读 <a href="http://blog.leichunfeng.com/blog/2015/05/31/objective-c-autorelease-pool-implementation-principle/" target="_blank" rel="external">雷纯峰 Objective-C Autorelease Pool 的实现原理</a> 的时候，发现他其中的实验例子在一些设备上已经失效。而这些设备恰好是 <strong>64位</strong> 设备。检索了下脑海中64位与32位的区别，第一个想到的就是 <code>Tagged Pointer</code>。</p>
<h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><p>怀着探索的目的，准备动手试一试。首先先看下结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">__weak NSString *string_weak_ = nil;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    // 场景 1</div><div class="line">    NSString *string = [NSString stringWithFormat:@&quot;leichunfeng&quot;];</div><div class="line">    string_weak_ = string;</div><div class="line"></div><div class="line">    // 场景 2</div><div class="line">//    @autoreleasepool &#123;</div><div class="line">//        NSString *string = [NSString stringWithFormat:@&quot;leichunfeng&quot;];</div><div class="line">//        string_weak_ = string;</div><div class="line">//    &#125;</div><div class="line"></div><div class="line">    // 场景 3</div><div class="line">//    NSString *string = nil;</div><div class="line">//    @autoreleasepool &#123;</div><div class="line">//        string = [NSString stringWithFormat:@&quot;leichunfeng&quot;];</div><div class="line">//        string_weak_ = string;</div><div class="line">//    &#125;</div><div class="line"></div><div class="line">    NSLog(@&quot;string: %@&quot;, string_weak_);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewWillAppear:(BOOL)animated &#123;</div><div class="line">    [super viewWillAppear:animated];</div><div class="line">    NSLog(@&quot;string: %@&quot;, string_weak_);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidAppear:(BOOL)animated &#123;</div><div class="line">    [super viewDidAppear:animated];</div><div class="line">    NSLog(@&quot;string: %@&quot;, string_weak_);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>64位下输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 场景 1</div><div class="line">2017-8-26 13:38:38.291705+0800 testPro[4036:799277] string: leichunfeng</div><div class="line">2017-8-26 13:38:38.291932+0800 testPro[4036:799277] string: leichunfeng</div><div class="line">2017-8-26 13:38:38.295360+0800 testPro[4036:799277] string: leichunfeng</div><div class="line"></div><div class="line">// 场景 2</div><div class="line">2017-8-26 13:44:11.657844+0800 testPro[4112:817709] string: leichunfeng</div><div class="line">2017-8-26 13:44:11.658055+0800 testPro[4112:817709] string: leichunfeng</div><div class="line">2017-8-26 13:44:11.661383+0800 testPro[4112:817709] string: leichunfeng</div><div class="line"></div><div class="line">// 场景 3</div><div class="line">2017-8-26 13:45:13.864718+0800 testPro[4139:821594] string: leichunfeng</div><div class="line">2017-8-26 13:45:13.864943+0800 testPro[4139:821594] string: leichunfeng</div><div class="line">2017-8-26 13:45:13.868293+0800 testPro[4139:821594] string: leichunfeng</div></pre></td></tr></table></figure>
<p>32位下输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 场景 1</div><div class="line">2015-05-30 10:32:20.837 AutoreleasePool[33876:1448343] string: leichunfeng</div><div class="line">2015-05-30 10:32:20.838 AutoreleasePool[33876:1448343] string: leichunfeng</div><div class="line">2015-05-30 10:32:20.845 AutoreleasePool[33876:1448343] string: (null)</div><div class="line"></div><div class="line">// 场景 2</div><div class="line">2015-05-30 10:32:50.548 AutoreleasePool[33915:1448912] string: (null)</div><div class="line">2015-05-30 10:32:50.549 AutoreleasePool[33915:1448912] string: (null)</div><div class="line">2015-05-30 10:32:50.555 AutoreleasePool[33915:1448912] string: (null)</div><div class="line"></div><div class="line">// 场景 3</div><div class="line">2015-05-30 10:33:07.075 AutoreleasePool[33984:1449418] string: leichunfeng</div><div class="line">2015-05-30 10:33:07.075 AutoreleasePool[33984:1449418] string: (null)</div><div class="line">2015-05-30 10:33:07.094 AutoreleasePool[33984:1449418] string: (null)</div></pre></td></tr></table></figure>
<p>在64位下。毫无例外的都输出了结果。第一次看到的时候，完全觉得不可思议，突然想到这个其实和 <code>NSString</code> 直接输入字符串得到的结果是相同的。</p>
<blockquote>
<p>这里牵扯到 <code>NSString *str = @&quot;leichunfeng&quot;</code> 不会被释放，是因为这样的话 str 是被当一个 Strinig 类型的常量 <code>NSCFConstantString</code> 来对待的。</p>
</blockquote>
<p>但是这里都是使用工厂方法创建的类型。所以都是应该是一个实实在在的对象。结合 <code>Tagged Pointer</code> 我们知道，在64位下，对象的指针是会进行优化的。在 64位 代码中断点我们也可以看到这个对象确确实实是一个 <code>NSTaggedPointerString</code> 对象。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/work/1509000939995.png" width="179"></p>
<p>所以假设成立。这是由于 <code>Tagged Pointer</code> 引起的无法释放。那光了解到这里，显然是不够的。继续深入了解下 <code>Tagged Pointer</code>。</p>
<h2 id="Tagged-Pointer"><a href="#Tagged-Pointer" class="headerlink" title="Tagged Pointer"></a>Tagged Pointer</h2><blockquote>
<p>为了优化内存，Apple 在64位设备中，引入了 <code>Tagged Pointer</code> 来优化 isa 指针。（64位的指针来记录地址太浪费啦～）。其中有一部分就默认了一些值<code>NSDate</code>,<code>NSNumber</code>,<code>NSString</code>…</p>
</blockquote>
<p>照这么说，如果一个值的类型很大，那必然无法使用 <code>Tagged Pointer</code> 来进行优化，我对原来的代码进行一些修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">__weak NSString *string_weak_ = nil;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    </div><div class="line">    // 场景 1</div><div class="line">    NSString *string = [NSString stringWithFormat:@&quot;12345678900&quot;];</div><div class="line">    string_weak_ = string;</div><div class="line">    </div><div class="line">    // 场景 2</div><div class="line">//        @autoreleasepool &#123;</div><div class="line">//            NSString *string = [NSString stringWithFormat:@&quot;12345678900&quot;];</div><div class="line">//            string_weak_ = string;</div><div class="line">//        &#125;</div><div class="line">    </div><div class="line">    // 场景 3</div><div class="line">//        NSString *string = nil;</div><div class="line">//        @autoreleasepool &#123;</div><div class="line">//            string = [NSString stringWithFormat:@&quot;12345678900&quot;];</div><div class="line">//            string_weak_ = string;</div><div class="line">//        &#125;</div><div class="line">    </div><div class="line">    NSLog(@&quot;string: %@&quot;, string_weak_);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewWillAppear:(BOOL)animated &#123;</div><div class="line">    [super viewWillAppear:animated];</div><div class="line">    NSLog(@&quot;string: %@&quot;, string_weak_);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidAppear:(BOOL)animated &#123;</div><div class="line">    [super viewDidAppear:animated];</div><div class="line">    NSLog(@&quot;string: %@&quot;, string_weak_);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)didReceiveMemoryWarning &#123;</div><div class="line">    [super didReceiveMemoryWarning];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>64位下输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 场景 1</div><div class="line">2017-8-26 15:43:23.232464+0800 testPro[5432:1104611] string: 12345678900</div><div class="line">2017-8-26 15:43:23.232667+0800 testPro[5432:1104611] string: 12345678900</div><div class="line">2017-8-26 15:43:23.237981+0800 testPro[5432:1104611] string: (null)</div><div class="line"></div><div class="line">// 场景 2</div><div class="line">2017-10-26 15:44:08.761063+0800 testPro[5460:1109356] string: (null)</div><div class="line">2017-10-26 15:44:08.761292+0800 testPro[5460:1109356] string: (null)</div><div class="line">2017-10-26 15:44:08.766554+0800 testPro[5460:1109356] string: (null)</div><div class="line"></div><div class="line">// 场景 3</div><div class="line">2017-10-26 15:44:57.918361+0800 testPro[5485:1114091] string: 12345678900</div><div class="line">2017-10-26 15:44:57.918576+0800 testPro[5485:1114091] string: (null)</div><div class="line">2017-10-26 15:44:57.923708+0800 testPro[5485:1114091] string: (null)</div></pre></td></tr></table></figure>
<p>这一下，完全可以放心了。输出的结果和 32位 下的完全一致。这就表明了。在 <code>Tagged Pointer</code> 下，指针默认储存着一些值。</p>
<h3 id="Tagged-Pointer-对应关系"><a href="#Tagged-Pointer-对应关系" class="headerlink" title="Tagged Pointer 对应关系"></a>Tagged Pointer 对应关系</h3><p>简单记录下 Tagged Pointer 中 <code>isa</code> 的指针存放。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">union isa_t </div><div class="line">&#123; </div><div class="line">    isa_t() &#123; &#125;</div><div class="line">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</div><div class="line"></div><div class="line">    Class cls;</div><div class="line">    uintptr_t bits;</div><div class="line"></div><div class="line">#if SUPPORT_NONPOINTER_ISA</div><div class="line"># if __arm64__</div><div class="line">#   define ISA_MASK        0x00000001fffffff8ULL</div><div class="line">#   define ISA_MAGIC_MASK  0x000003fe00000001ULL</div><div class="line">#   define ISA_MAGIC_VALUE 0x000001a400000001ULL</div><div class="line">    struct &#123;</div><div class="line">        uintptr_t indexed           : 1;</div><div class="line">        uintptr_t has_assoc         : 1;</div><div class="line">        uintptr_t has_cxx_dtor      : 1;</div><div class="line">        uintptr_t shiftcls          : 30; // MACH_VM_MAX_ADDRESS 0x1a0000000</div><div class="line">        uintptr_t magic             : 9;</div><div class="line">        uintptr_t weakly_referenced : 1;</div><div class="line">        uintptr_t deallocating      : 1;</div><div class="line">        uintptr_t has_sidetable_rc  : 1;</div><div class="line">        uintptr_t extra_rc          : 19;</div><div class="line">#       define RC_ONE   (1ULL&lt;&lt;45)</div><div class="line">#       define RC_HALF  (1ULL&lt;&lt;18)</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"># elif __x86_64__</div><div class="line">#   define ISA_MASK        0x00007ffffffffff8ULL</div><div class="line">#   define ISA_MAGIC_MASK  0x0000000000000001ULL</div><div class="line">#   define ISA_MAGIC_VALUE 0x0000000000000001ULL</div><div class="line">    struct &#123;</div><div class="line">        uintptr_t indexed           : 1;</div><div class="line">        uintptr_t has_assoc         : 1;</div><div class="line">        uintptr_t has_cxx_dtor      : 1;</div><div class="line">        uintptr_t shiftcls          : 44; // MACH_VM_MAX_ADDRESS 0x7fffffe00000</div><div class="line">        uintptr_t weakly_referenced : 1;</div><div class="line">        uintptr_t deallocating      : 1;</div><div class="line">        uintptr_t has_sidetable_rc  : 1;</div><div class="line">        uintptr_t extra_rc          : 14;</div><div class="line">#       define RC_ONE   (1ULL&lt;&lt;50)</div><div class="line">#       define RC_HALF  (1ULL&lt;&lt;13)</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"># else</div><div class="line">    // Available bits in isa field are architecture-specific.</div><div class="line">#   error unknown architecture</div><div class="line"># endif</div><div class="line"></div><div class="line">// SUPPORT_NONPOINTER_ISA</div><div class="line">#endif</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>isa</code> 对应的含义</p>
<table>
<thead>
<tr>
<th style="text-align:left">Tables</th>
<th style="text-align:left">Are</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">indexed</td>
<td style="text-align:left">0 表示普通的 isa 指针，1 表示使用优化，存储引用计数</td>
</tr>
<tr>
<td style="text-align:left">has_assoc</td>
<td style="text-align:left">表示该对象是否包含 associated object，如果没有，则析构时会更快</td>
</tr>
<tr>
<td style="text-align:left">has_cxx_dtor</td>
<td style="text-align:left">表示该对象是否有 C++ 或 ARC 的析构函数，如果没有，则析构时更快</td>
</tr>
<tr>
<td style="text-align:left">shiftcls</td>
<td style="text-align:left">类的指针</td>
</tr>
<tr>
<td style="text-align:left">magic</td>
<td style="text-align:left">固定值为 0xd2，用于在调试时分辨对象是否未完成初始化。</td>
</tr>
<tr>
<td style="text-align:left">weakly_referenced</td>
<td style="text-align:left">表示该对象是否有过 weak 对象，如果没有，则析构时更快</td>
</tr>
<tr>
<td style="text-align:left">has<em> sidetable</em> rc</td>
<td style="text-align:left">表示该对象的引用计数值是否过大无法存储在 isa 指针</td>
</tr>
<tr>
<td style="text-align:left">extra_rc</td>
<td style="text-align:left">存储引用计数值减一后的结果</td>
</tr>
</tbody>
</table>
<p>该部分引用自 <a href="http://yulingtianxia.com/blog/2015/12/06/The-Principle-of-Refenrence-Counting/" target="_blank" rel="external">Objective-C 引用计数原理</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;在阅读 &lt;a href=&quot;http://blog.leichunfeng.com/blog/2015/05/31/objective-c-a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于 iOS 生产模式下的错误捕捉（swift 版本）</title>
    <link href="shaop.github.io/2017/09/12/%E5%85%B3%E4%BA%8E%20iOS%20%E7%94%9F%E4%BA%A7%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E9%94%99%E8%AF%AF%E6%8D%95%E6%8D%89%EF%BC%88swift%20%E7%89%88%E6%9C%AC%EF%BC%89/"/>
    <id>shaop.github.io/2017/09/12/关于 iOS 生产模式下的错误捕捉（swift 版本）/</id>
    <published>2017-09-12T09:30:38.000Z</published>
    <updated>2017-10-26T14:14:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>事件的起因是之前公司的新项目使用了 swift 进行编程，经过几个月的打磨后终于上线，上线后使用的是友盟进行缺陷的捕捉。</p>
<p>捕捉到的内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">*** -[__NSArrayM insertObject:atIndex:]: object cannot be nil</div><div class="line">(null)</div><div class="line">((</div><div class="line">	0   CoreFoundation                      0x0000000182b05918 &lt;redacted&gt; + 148</div><div class="line">	1   libobjc.A.dylib                     0x0000000182173f80 objc_exception_throw + 56</div><div class="line">	2   CoreFoundation                      0x00000001829ef134 CFStringConvertNSStringEncodingToEncoding + 0</div><div class="line">	3   UIKit                               0x0000000187b3a71c &lt;redacted&gt; + 208</div><div class="line">	4   UIKit                               0x0000000187830210 &lt;redacted&gt; + 620</div><div class="line">	5   UIKit                               0x0000000187847c58 &lt;redacted&gt; + 108</div><div class="line">	6   UIKit                               0x0000000187a0d5b4 &lt;redacted&gt; + 4036</div><div class="line">	7   UIKit                               0x00000001879f0114 &lt;redacted&gt; + 12824</div><div class="line">	8   UIKit                               0x0000000187a0a9f8 &lt;redacted&gt; + 360</div><div class="line">	9   xxxx                                0x10009e5c8 xxxx + 648648</div><div class="line">	10  xxxx                                0x10009cbd4 xxxx + 642004</div><div class="line">	11  UIKit                               0x000000018792df38 &lt;redacted&gt; + 1316</div><div class="line">	12  UIKit                               0x00000001879ec018 &lt;redacted&gt; + 376</div><div class="line">	13  UIKit                               0x0000000187aa8b70 &lt;redacted&gt; + 292</div><div class="line">	14  UIKit                               0x0000000187ab6030 &lt;redacted&gt; + 92</div><div class="line">	15  UIKit                               0x00000001877e9c24 &lt;redacted&gt; + 96</div><div class="line">	16  CoreFoundation                      0x0000000182abc588 &lt;redacted&gt; + 32</div><div class="line">	17  CoreFoundation                      0x0000000182aba32c &lt;redacted&gt; + 372</div><div class="line">	18  CoreFoundation                      0x0000000182aba75c &lt;redacted&gt; + 928</div><div class="line">	19  CoreFoundation                      0x00000001829e9680 CFRunLoopRunSpecific + 384</div><div class="line">	20  GraphicsServices                    0x0000000183ef8088 GSEventRunModal + 180</div><div class="line">	21  UIKit                               0x0000000187860d90 UIApplicationMain + 204</div><div class="line">	22  xxxx                                0x100008120 xxxx + 33056</div><div class="line">	23  libdyld.dylib                       0x000000018258a8b8 &lt;redacted&gt; + 4</div><div class="line">)</div><div class="line"></div><div class="line">dSYM UUID: 66FA9D06-0793-324A-A6DF-CF2399C36D0F</div><div class="line">CPU Type: arm64</div><div class="line">Slide Address: 0x0000000100000000</div><div class="line">Binary Image: xxxx</div><div class="line">Base Address: 0x0000000100094000</div></pre></td></tr></table></figure>
<p>其中 <code>xxxx</code>代表项目名。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1509026234525.png" width="419"></p>
<p>进入到该版本的 dSYM 中。终端输入。即可看到错误的位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">atos -arch arm64 -o xxxx 0x10009e5c8</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事件的起因是之前公司的新项目使用了 swift 进行编程，经过几个月的打磨后终于上线，上线后使用的是友盟进行缺陷的捕捉。&lt;/p&gt;
&lt;p&gt;捕捉到的内容如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于 Jenkins 相关配置</title>
    <link href="shaop.github.io/2017/07/24/%E5%85%B3%E4%BA%8E%20Jenkins%20%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <id>shaop.github.io/2017/07/24/关于 Jenkins 相关配置/</id>
    <published>2017-07-24T11:23:13.000Z</published>
    <updated>2017-10-26T14:14:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 作为一款持续构建的平台，毋庸置疑我们需要去了解它。在最近公司的项目中，为了简化公司的构建成本，从而引入了 Jenkins 。</p>
<p>这一篇。将分成<strong>搭建</strong>和<strong>配置项目</strong>两个方面来记录一下我在搭建中遇到的坑和解决方案。</p>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>为了兼容移动产品（ iOS ）的构建，这里选择了在 macOS 上进行相关配置，这里选用的是一台公司暂时搁置的 mac mini 进行搭建。</p>
<h3 id="JDK-的安装"><a href="#JDK-的安装" class="headerlink" title="JDK 的安装"></a>JDK 的安装</h3><p>对于 Jenkins 本身而言。他是用 java 编写的，首先需要的就是 jdk 。</p>
<p>jdk 的安装方式有很多。我这里使用的是 Homebrew 进行安装。接下去很多的环境，我也是采用 Homebrew 进行安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install jdk</div></pre></td></tr></table></figure></p>
<h3 id="Apple-系列产品环境"><a href="#Apple-系列产品环境" class="headerlink" title="Apple 系列产品环境"></a>Apple 系列产品环境</h3><p>对于 Apple 家族的 app（包括 iOS app ，Mac  app）。需要在 macOS 环境下才能进行构建，所以这里选择了 macOS 来进行搭建环境。</p>
<p>针对 Apple 的产品环境构建，只需要在 app store 上面下载 Xcode 即可。</p>
<blockquote>
<p>这里指的一体的是，Xcode 帮助我们省去很多不必要的麻烦。比如自带的 git 。</p>
</blockquote>
<h3 id="Android-环境搭建"><a href="#Android-环境搭建" class="headerlink" title="Android 环境搭建"></a>Android 环境搭建</h3><p>下载 android studio ，配置 gradle 版本。</p>
<h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装 Jenkins 流传着两种方法，一种是直接客户端安装，一种是命令行安装，亲身实践后，发现客户端安装会导致在配置 shell 的时候捕捉不到环境变量，不过这个可以在之后使用命令行重启来修复。这里我们直接使用命令行安装 Jenkins ，依旧使用 Homebrew 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install jenkins</div></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>找到 Jenkins 的 war 包所在目录。运行一下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar jenkins.war --httpPort=8080</div></pre></td></tr></table></figure></p>
<p>其中，8080 是端口号。<br>之后进行一系列的初始化设置就好了。</p>
<h2 id="配置-iOS-工程"><a href="#配置-iOS-工程" class="headerlink" title="配置 iOS 工程"></a>配置 iOS 工程</h2><h3 id="创建一个工程"><a href="#创建一个工程" class="headerlink" title="创建一个工程"></a>创建一个工程</h3><p>输入一个项目名称，然后选择 <strong>自由风格的软件项目</strong>  即可<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/work/1508989187323.png" width="738"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote>
<p>这里简单写一些重要的步骤。</p>
</blockquote>
<h4 id="源码配置"><a href="#源码配置" class="headerlink" title="源码配置"></a>源码配置</h4><p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/work/1508989661177.png" width="738"></p>
<p>这里使用的是公司自己的 git 。输入项目的 git 地址，然后，添加 git 相关的认证。这里推荐使用 ssh 的认证方式</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/work/1508989738451.png" width="738"></p>
<p>如下没有出现红色的错误信息表示配置正确。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/work/1508989837884.png" width="738"></p>
<h4 id="环境证书配置"><a href="#环境证书配置" class="headerlink" title="环境证书配置"></a>环境证书配置</h4><p>在具体配置构建之前，需要配置证书。这里先下载插件。<strong>Keychains and Provisioning Profiles Management</strong></p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/work/1508990139590.png" width="738"></p>
<p>进入 <strong>Keychains and Provisioning Profiles Management</strong> 配置具体的证书。上传 <code>login.keychain</code> 和具体的证书。</p>
<blockquote>
<p>这里关于 login.keychain 有个坑，在 macOS 10.12 之后找到的是 login.keychain-db，很多教程没有更新过来。</p>
</blockquote>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/work/1508990300967.png" width="738"></p>
<p>这样，环境证书就配置好了。</p>
<h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><blockquote>
<p>这里笔者使用的是 <code>fastlane</code> 进行构建。</p>
</blockquote>
<p>选择好的自己的刚刚倒入的证书<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/work/1508990775523.png" width="738"></p>
<p>添加构建步骤，选择 <code>Execute shell</code></p>
<p>如果项目有使用 <code>CocoaPods</code> 那此处就需要对项目首先进行一次 <code>pod install</code></p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/work/1508990932475.png" width="738"></p>
<p>接下去，就是用 <code>fastlane</code> 进行构建。配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">#指定项目的scheme名称</div><div class="line"></div><div class="line">scheme=&quot;xxx&quot;</div><div class="line"></div><div class="line">#指定要打包的配置名</div><div class="line"></div><div class="line">configuration=&quot;Adhoc&quot;</div><div class="line"></div><div class="line">#指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id，即xcodebuild的method参数</div><div class="line"></div><div class="line">export_method=&apos;ad-hoc&apos;</div><div class="line"></div><div class="line">#指定项目地址</div><div class="line"></div><div class="line">workspace_path=&quot;$project_path/xxx.xcworkspace&quot;</div><div class="line"></div><div class="line">#指定输出路径</div><div class="line"></div><div class="line">output_path=&quot;/Users/xxx/Documents/xxxx&quot;</div><div class="line"></div><div class="line">#指定输出归档文件地址</div><div class="line"></div><div class="line">archive_path=&quot;$output_path/hkb_iOS_$&#123;now&#125;.xcarchive&quot;</div><div class="line"></div><div class="line">#指定输出ipa地址</div><div class="line"></div><div class="line">ipa_path=&quot;$output_path/xxxx_$&#123;now&#125;.ipa&quot;</div><div class="line"></div><div class="line">#指定输出ipa名称</div><div class="line"></div><div class="line">ipa_name=&quot;xxxx_$&#123;now&#125;.ipa&quot;</div><div class="line"></div><div class="line">#获取执行命令时的commit message</div><div class="line"></div><div class="line">commit_msg=&quot;$1&quot;</div><div class="line"></div><div class="line">#输出设定的变量值</div><div class="line"></div><div class="line">echo &quot;===workspace path: $&#123;workspace_path&#125;===&quot;</div><div class="line"></div><div class="line">echo &quot;===archive path: $&#123;archive_path&#125;===&quot;</div><div class="line"></div><div class="line">echo &quot;===ipa path: $&#123;ipa_path&#125;===&quot;</div><div class="line"></div><div class="line">echo &quot;===export method: $&#123;export_method&#125;===&quot;</div><div class="line"></div><div class="line">echo &quot;===commit msg: $1===&quot;</div><div class="line"></div><div class="line">#先清空前一次build</div><div class="line"></div><div class="line">#fastlane gym --workspace $&#123;workspace_path&#125; --scheme $&#123;scheme&#125; --clean --configuration $&#123;configuration&#125; --archive_path $&#123;archive_path&#125; --export_method $&#123;export_method&#125; --output_directory $&#123;output_path&#125; --output_name $&#123;ipa_name&#125;</div></pre></td></tr></table></figure>
<p>最后，再上传蒲公英。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -F &quot;file=@$&#123;IPANAME&#125;.ipa&quot; -F &quot;uKey=xxxx&quot; -F &quot;_api_key=xxxx&quot; -F &quot;password=xxxx&quot; https://qiniu-storage.pgyer.com/apiv1/app/upload</div></pre></td></tr></table></figure>
<h3 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h3><p>保存之后就可以开始构建了。等待一段时间，<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/work/1508991226441.png" width="32"><br>表示失败，<img src="http://7xkl1p.com1.z0.glb.clouddn.com/work/1508991239050.png" width="33"><br>表示成功。</p>
<h2 id="配置-Android-工程"><a href="#配置-Android-工程" class="headerlink" title="配置 Android 工程"></a>配置 Android 工程</h2><blockquote>
<p>相比较于 iOS ，android 的构建会显得简单一点。源码配置相类似。具体从构建步骤开始</p>
</blockquote>
<h3 id="构建-1"><a href="#构建-1" class="headerlink" title="构建"></a>构建</h3><h4 id="构建版本"><a href="#构建版本" class="headerlink" title="构建版本"></a>构建版本</h4><p>点击添加构建版本后，选择 <code>Invoke Gradle scprit</code> 填写好相应信息后即可。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/work/1508991827807.png" width="738"></p>
<p>具体的构建内容，需要从 android 的 <code>gradle</code> 文件中配置，每个项目都不一样，再次不一一列举。</p>
<p>最后再上传蒲公英</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -F &quot;file=@$xxx.apk&quot; -F &quot;uKey=xxxx&quot; -F &quot;_api_key=xxxx&quot; -F &quot;password=xxxx&quot; https://qiniu-storage.pgyer.com/apiv1/app/upload</div></pre></td></tr></table></figure>
<blockquote>
<p>有一点需要说明，android 的版本构建依赖于 keystore 。这个文件不建议放在版本控制器上，建议拷贝一份放在 Jenkins 的构建源码版本中。</p>
</blockquote>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>have fun！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins 作为一款持续构建的平台，毋庸置疑我们需要去了解它。在最近公司的项目中，为了简化公司的构建成本，从而引入了 Jenkins 。&lt;/p&gt;
&lt;p&gt;这一篇。将分成&lt;strong&gt;搭建&lt;/strong&gt;和&lt;strong&gt;配置项目&lt;/strong&gt;两个方面来记录一下我在
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa 学习心得</title>
    <link href="shaop.github.io/2017/06/11/ReactiveCocoa%20%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    <id>shaop.github.io/2017/06/11/ReactiveCocoa 学习心得/</id>
    <published>2017-06-11T13:51:22.000Z</published>
    <updated>2017-10-26T14:16:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础认识"><a href="#基础认识" class="headerlink" title="基础认识"></a>基础认识</h2><p>信号：发送一个动作，让订阅这个信号的订阅者接收这些动作。只要有改变，信号内部接受数据就会马上发送数据</p>
<p>订阅：订阅后方可接受信号内的消息。</p>
<p>命令：命令一般用于网络请求，内包含一些耗时的操作。结束后发送一个信号。</p>
<h2 id="一、RACSignal"><a href="#一、RACSignal" class="headerlink" title="一、RACSignal"></a>一、RACSignal</h2><p>创建<code>RACSignal</code> .使用<code>createSignal</code>方法，可以构建一个方法，在block内部，使用<code>subscriber(订阅者)</code>发送信号在其他地方的signal被订阅就会接受到信号内的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//创建信号</div><div class="line">RACSignal *signal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    [subscriber sendNext:@&quot;this is a signal&quot;];</div><div class="line">    [subscriber sendCompleted];</div><div class="line"></div><div class="line">    return [RACDisposable disposableWithBlock:^&#123;</div><div class="line">        NSLog(@&quot;信号在这里被终止了&quot;);</div><div class="line">    &#125;];</div><div class="line">&#125;];</div><div class="line"></div><div class="line">//订阅信号</div><div class="line">[signal subscribeNext:^(id x) &#123;</div><div class="line">    NSLog(@&quot;在这里接受到信号:%@&quot;,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p><em>控制台输出</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-01-05 21:42:36.422 learnRAC[1336:29812] 在这里接受到信号:this is a signal</div><div class="line">2017-01-05 21:42:36.423 learnRAC[1336:29812] 信号在这里被终止了</div></pre></td></tr></table></figure>
<h2 id="二、RACSubject"><a href="#二、RACSubject" class="headerlink" title="二、RACSubject"></a>二、RACSubject</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>RACSubject</strong><br>信号提供者，自己可以充当信号，又能发送信号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//创建一个信号</div><div class="line">RACSubject *subject = [RACSubject subject];</div><div class="line"></div><div class="line">//订阅者接受消息</div><div class="line">[subject subscribeNext:^(id x) &#123;</div><div class="line">    NSLog(@&quot;第一个订阅者在这里接收到信号:%@&quot;,x);</div><div class="line">&#125;];</div><div class="line"></div><div class="line">[subject subscribeNext:^(id x) &#123;</div><div class="line">    NSLog(@&quot;第二个订阅者在这里接收到信号:%@&quot;,x);</div><div class="line">&#125;];</div><div class="line"></div><div class="line">//发送消息</div><div class="line">[subject sendNext:@&quot;一条消息&quot;];</div></pre></td></tr></table></figure>
<p><em>控制台输出</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-01-05 23:01:13.401 learnRAC[1929:88074] 第一个订阅者在这里接收到信号:一条消息</div><div class="line">2017-01-05 23:01:13.404 learnRAC[1929:88074] 第二个订阅者在这里接收到信号:一条消息</div></pre></td></tr></table></figure></p>
<p><strong>RACReplaySubject</strong><br><code>RACReplaySubject</code>允许先发送，后订阅。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 1.创建信号</div><div class="line">RACReplaySubject *replaySubject = [RACReplaySubject subject];</div><div class="line"></div><div class="line">// 2.发送信号</div><div class="line">[replaySubject sendNext:@1];</div><div class="line">[replaySubject sendNext:@2];</div><div class="line"></div><div class="line">// 3.订阅信号</div><div class="line">[replaySubject subscribeNext:^(id x) &#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;第一个订阅者接收到的数据%@&quot;,x);</div><div class="line">&#125;];</div><div class="line"></div><div class="line">// 订阅信号</div><div class="line">[replaySubject subscribeNext:^(id x) &#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;第二个订阅者接收到的数据%@&quot;,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p><strong>这里可以总结一下</strong></p>
<ol>
<li><code>subscribeNext:</code>方法是订阅者接受消息</li>
<li><code>sendNext:</code>方法是订阅者发送消息</li>
</ol>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>RACSubject可以用来代替delegate 。方便实现代理的功能。<br>使用方法如下</p>
<p><strong>viewController1.m</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender&#123;</div><div class="line">    SecondViewController *vc = segue.destinationViewController;</div><div class="line">    vc.delegate = [RACSubject subject];</div><div class="line">    [vc.delegate subscribeNext:^(id x) &#123;</div><div class="line">        NSLog(@&quot;按钮被点击%@&quot;,x);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>viewController2.h</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@interface viewController2 : UIViewController</div><div class="line">@property (nonatomic , strong) RACSubject *delegate;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>viewController2.m</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (IBAction)ClickAction:(id)sender &#123;</div><div class="line">    if (self.delegate) &#123;</div><div class="line">        [self.delegate sendNext:@&quot;this is a msg&quot;];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>控制台输出</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2017-01-05 22:57:55.701 learnRAC[1874:84684] 按钮被点击this is a msg</div></pre></td></tr></table></figure></p>
<p>用这种方式，比直接写delegate方法要来的快得多。</p>
<h2 id="三、RACCommand"><a href="#三、RACCommand" class="headerlink" title="三、RACCommand"></a>三、RACCommand</h2><p><code>RACCommand</code>从字面意思上是一个命令，其主要应用场景在于应用一些耗时的操作，例如网络操作，之后再发送一个信号，进行消息数据的传递。</p>
<p><strong>例子</strong><br>模仿一个viewmodel的网络操作，获取数据后传递给viewController进行数据显示。<br><strong>viewmodel</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">-(void)doNetWork&#123;</div><div class="line">    if (self = [super init]) &#123;</div><div class="line">        RACCommand *command = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) &#123;</div><div class="line">            </div><div class="line">            NSLog(@&quot;这里执行了一段网络请求获取到的input是：%@&quot;,input);</div><div class="line">            NSString *data = @&quot;返回数据&quot;;</div><div class="line"></div><div class="line">            return [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">                [subscriber sendNext:data];</div><div class="line">                [subscriber sendCompleted];</div><div class="line">                return [RACDisposable disposableWithBlock:^&#123;</div><div class="line">                    NSLog(@&quot;销毁了信号&quot;);</div><div class="line">                &#125;];</div><div class="line">            &#125;];</div><div class="line">            </div><div class="line">        &#125;];</div><div class="line">        _command = command;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>viewController</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    CommandViewModel *cmdVD = [[CommandViewModel alloc] init];</div><div class="line">    [cmdVD.command.executionSignals subscribeNext:^(id x) &#123;</div><div class="line">        [x subscribeNext:^(id x) &#123;</div><div class="line">            NSLog(@&quot;网络请求的数据为:%@&quot;,x);</div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    //高级用法</div><div class="line">    [cmdVD.command.executionSignals.switchToLatest subscribeNext:^(id x) &#123;</div><div class="line">        NSLog(@&quot;网络请求的数据为:%@&quot;,x);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里，还可以根据发送signal的状态定义command接收的状态。</p>
<p><code>[subscriber sendError:[[NSError alloc] init]];</code></p>
<p>那么在接受的时候就可以使用此方法来接受错误状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[cmdVD.command.errors.switchToLatest subscribeNext:^(id x) &#123;</div><div class="line">//do error        </div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h2 id="几个有趣的实用性方法"><a href="#几个有趣的实用性方法" class="headerlink" title="几个有趣的实用性方法"></a>几个有趣的实用性方法</h2><ol>
<li><code>rac_signalForSelector</code> ：用作代替代理，实现某些Selector时需要执行的语句。</li>
<li><code>rac_valuesAndChangesForKeyPath</code> ：用作代替KVO，对某个对象进行监听。</li>
<li><code>rac_signalForControlEvents</code>：用作监听某些动作，比如按下按钮的这些动作。</li>
<li><code>rac_addObserverForName</code>：用作监听某些通知，例如OC中的NSNotification。</li>
<li><code>rac_textSignal</code>：用作监听文本框内容的变化。</li>
<li><code>rac_liftSelector:withSignalsFromArray:Signals</code>：这是一个信号组，但是这些signals必须都被sendNext过。</li>
</ol>
<h2 id="几个重要的操作方法"><a href="#几个重要的操作方法" class="headerlink" title="几个重要的操作方法"></a>几个重要的操作方法</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map的作用：把原信号的值映射成一个新的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 创建信号</div><div class="line">RACSubject *subject = [RACSubject subject];</div><div class="line"></div><div class="line">RACSignal *signal = [subject map:^id(id value) &#123;</div><div class="line">    // 当原信号发送数据的时候就会来调用这个block,修改原信号的内容</div><div class="line">    value  = @([value floatValue] +1.0);</div><div class="line">    // 返回值就是修改后的原信号的内容</div><div class="line">    return value;</div><div class="line">&#125;];</div><div class="line"></div><div class="line">[signal subscribeNext:^(id x) &#123;</div><div class="line">    NSLog(@&quot;%@&quot;,x);</div><div class="line">&#125;];</div><div class="line"></div><div class="line">[subject sendNext:@&quot;999&quot;];</div></pre></td></tr></table></figure>
<p><em>返回</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2017-01-06 14:11:15.024 testRAC[3121:139101] 1000</div></pre></td></tr></table></figure>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>merge：把多个信号合并为一个信号，任何一个信号有新值时就会调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">        [subscriber sendNext:@&quot;signalA发送完信号&quot;];</div><div class="line">       </div><div class="line">        return  nil;</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">        [subscriber sendNext:@&quot;signalB发送完信号&quot;];</div><div class="line">        </div><div class="line">        return nil;</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    // 合并信号，任何一个信号发送数据都能在订阅中监听到</div><div class="line">    RACSignal *mergesignal = [signalA merge:signalB];</div><div class="line">    </div><div class="line">    [mergesignal subscribeNext:^(id x) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;,x);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础认识&quot;&gt;&lt;a href=&quot;#基础认识&quot; class=&quot;headerlink&quot; title=&quot;基础认识&quot;&gt;&lt;/a&gt;基础认识&lt;/h2&gt;&lt;p&gt;信号：发送一个动作，让订阅这个信号的订阅者接收这些动作。只要有改变，信号内部接受数据就会马上发送数据&lt;/p&gt;
&lt;p&gt;订阅：订
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>唐巧《ios开发进阶》笔记</title>
    <link href="shaop.github.io/2017/03/28/%E5%94%90%E5%B7%A7%E3%80%8Aios%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>shaop.github.io/2017/03/28/唐巧《ios开发进阶》笔记/</id>
    <published>2017-03-28T12:29:11.000Z</published>
    <updated>2017-03-28T12:40:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前书读的很多。但是感觉没有有效的记录一些有用的东西，现在开始记录一些我认为的重点。方便以后查找。</p>
</blockquote>
<h2 id="阅后小感"><a href="#阅后小感" class="headerlink" title="阅后小感"></a>阅后小感</h2><p>买这本书时还出处于刚开始进阶。我觉得这本书对于刚开始进阶的人还有所有用处的。因为这本书虽然涉及面广，所涉及的深度并没有太深。而且知识点也有点老。</p>
<blockquote>
<p>就连巧神也说。他这本书现在太旧了。不适合购买。</p>
</blockquote>
<h2 id="实用工具篇"><a href="#实用工具篇" class="headerlink" title="实用工具篇"></a>实用工具篇</h2><p>在这里简述了很多实用的工具。简单做下简介。</p>
<h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><p>这个实在太普遍了。项目中使用也是很方便。但仍然有一些人喜欢使用手动集成的方法。具体介绍网上太多。不详细写了。</p>
<p>关于 <code>pod install</code> 和 <code>pod update</code> 书中没有写。之前有个学弟和我说起这个。但是感觉理解是错误的。所以做个记号。</p>
<ul>
<li><p><code>pod install</code> 表示，如果有 Podfile.lock 文件，则更新为 Podfile.lock 内指定版本的库文件，如果没有 pod.lock 文件，则更新到网络上最新的库</p>
</li>
<li><p><code>pod update</code> 表示无视 Podfile.lock 文件。将库文件更新到最新库的版本</p>
</li>
</ul>
<h3 id="Charles-抓包工具"><a href="#Charles-抓包工具" class="headerlink" title="Charles 抓包工具"></a>Charles 抓包工具</h3><p>使用简介在<a href="http://blog.devtang.com/2015/11/14/charles-introduction/" target="_blank" rel="external">唐巧的博客</a> 上有,应该是目前网上最全的 Charles 教程。</p>
<h3 id="Reveal-界面调试工具"><a href="#Reveal-界面调试工具" class="headerlink" title="Reveal 界面调试工具"></a>Reveal 界面调试工具</h3><p>很强大的解析 app 界面的工具。有了它。就可以知道一些大的app的布局是怎么样的。但是前提是设备需要越狱。目前手上没有已越狱的设备。还没试过。等下次越狱的时候再做记录。</p>
<h3 id="一些日志收集和统计工具"><a href="#一些日志收集和统计工具" class="headerlink" title="一些日志收集和统计工具"></a>一些日志收集和统计工具</h3><p>国内这两年用友盟用的比较多。知道这些工具之后还是拓展了下知识面。</p>
<h3 id="Xcode-插件"><a href="#Xcode-插件" class="headerlink" title="Xcode 插件"></a>Xcode 插件</h3><p>Xcode 8 已经不支持插件了。网上有些偏门的方法来做到使用插件。但是我也不太习惯。如果硬是要用的话。可以退回到 Xcode 7 的版本。</p>
<blockquote>
<p>还有些其他工具很细小。不做列举</p>
</blockquote>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="UIWindow-使用"><a href="#UIWindow-使用" class="headerlink" title="UIWindow 使用"></a>UIWindow 使用</h3><p>UIWindow 继承自 UIView 所以它包含所有 UIView 的特性，其作用有以下2点：</p>
<ol>
<li>作为顶层容器，来包含所有的 View</li>
<li>传递触摸消息给其他的 View</li>
</ol>
<h4 id="UIWindow-的层级"><a href="#UIWindow-的层级" class="headerlink" title="UIWindow 的层级"></a>UIWindow 的层级</h4><p>并不是所有新建的 UIWindow 都是在最顶层的。UIWindow 有 <code>UIWindowLevel</code> 属性，来设置它的显示位置</p>
<blockquote>
<p>不能滥用 UIWindow ，如果不是为了在所有页面上都显示一个 View 的话。尽量不要使用 UIWindow 不然新创建的 UIWindow 会得不到释放。 类似于MBProgress 组件，会让你指定一个显示 View ，用于更好的显示</p>
</blockquote>
<h3 id="动态下载字体"><a href="#动态下载字体" class="headerlink" title="动态下载字体"></a>动态下载字体</h3><p>苹果官方提供了一部分特殊的中文字体。可以通过应用内下载的方式集成到 app 中。</p>
<h3 id="应用内安全"><a href="#应用内安全" class="headerlink" title="应用内安全"></a>应用内安全</h3><p>除了使用 https 以外，对于隐私和敏感数据的保护尤为重要。总结如下几点：</p>
<ol>
<li>用户密码明文形式很容易通过 Charels 来截取，应该通过加密公钥和私钥的方式来获取。服务器使用私钥解码后，再加盐后多次 md5 。</li>
<li>对通信协议进行加密。可以保证协议不会被轻易读取出来。（Protobuf 谷歌提供的开源数据交换格式）</li>
<li>对于一些配置数据，我们不应该直接把它们放在资源文件中。（例如 js 文件）应该进行适当加密</li>
<li>对于一些用户数据，我们更应该加他们使用 keychain 保护起来。</li>
<li>对于反编译，或许采取一些混淆的反汇编手段会来的更好。</li>
</ol>
<h2 id="比较重要的小技巧"><a href="#比较重要的小技巧" class="headerlink" title="比较重要的小技巧"></a>比较重要的小技巧</h2><p>在书中第18章中列举了很多小技巧。这里只记录几个我觉得比较重要。并且实用性比较高的</p>
<ol>
<li><p>Daily Build 在 <a href="http://blog.devtang.com/2012/02/16/apply-daily-build-in-ios-project/" target="_blank" rel="external">唐巧的博客</a> 中也有。添加Daily Build 真的是件很幸福的事。希望以后有机会我能多尝试一些脚本语言来进行一些处理日常事务上的事</p>
</li>
<li><p>代码片段管理。 书中介绍了配置自己的代码片段。但是会不会配合 Alare 操作起来会更好？</p>
</li>
<li><p>快捷键。更推荐趣直播 张星宇 的直播。大大提升开发效率。</p>
</li>
</ol>
<blockquote>
<p>最后，本书中还有包括 <strong>内存管理</strong> 、<strong>GDC</strong> 、 <strong>底层开发</strong> 都放到了后续《 iOS 与 OS X 多线程和内存管理》一书中详解。还有一部分 <strong>CoreText 排版引擎</strong> 后续有机会整理出来单独写一篇。这个可以学习的东西还有很多。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前书读的很多。但是感觉没有有效的记录一些有用的东西，现在开始记录一些我认为的重点。方便以后查找。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;阅后小感&quot;&gt;&lt;a href=&quot;#阅后小感&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Masnory与自动布局的故事</title>
    <link href="shaop.github.io/2017/03/16/Masnory/"/>
    <id>shaop.github.io/2017/03/16/Masnory/</id>
    <published>2017-03-16T12:29:45.000Z</published>
    <updated>2017-03-16T15:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前段时间太忙。没有时间更新，把之前整理的东西再拿出来好好整理一遍。这篇主要接上文。整理一下Masnory的使用。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用苹果自带的<strong>xib</strong>或者<strong>storyboard</strong>必然有很多方便的地方，但是仍然有时无法避免有些做不到的事情，或者做起来没有那么方便的事情，这时候代码布局就显得很重要了。关于Masnory的教程，网上有很多，这里先列举一些。</p>
<ul>
<li><a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">学习官方文档总是没有错的</a></li>
<li><a href="http://www.cocoachina.com/ios/20141219/10702.html" target="_blank" rel="external">CocoaChina 的 Masnory 教程</a></li>
</ul>
<p>在这里，简单总结一些Masnory的方法，以及一些不太用到的方法。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>在阅读完并完成相关安装步骤后，可以先从Masnory类的方法和属性来看起。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>先是3个基础方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//设置约束</div><div class="line">- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *make))block;</div><div class="line"></div><div class="line">//更新约束</div><div class="line">- (NSArray *)mas_updateConstraints:(void(^)(MASConstraintMaker *make))block;</div><div class="line"></div><div class="line">//重新设置约束</div><div class="line">- (NSArray *)mas_remakeConstraints:(void(^)(MASConstraintMaker *make))block;</div></pre></td></tr></table></figure>
<p>使用如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  _businessLabel = [UILabel new];</div><div class="line">  [self addSubview:_businessLabel];</div><div class="line">  </div><div class="line">  //设置约束</div><div class="line">  [_businessLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">//设置一些约束</div><div class="line">  &#125;];</div><div class="line"></div><div class="line">  //更新约束</div><div class="line">  [_businessLabel mas_updateConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">//设置一些约束</div><div class="line">  &#125;];</div><div class="line"></div><div class="line">  //重新设置约束</div><div class="line">  [_businessLabel mas_remakeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">//设置一些约束</div><div class="line">  &#125;];</div></pre></td></tr></table></figure>
<p>掌握着三个方法，基本上就能掌握日常使用的一些基本布局了</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>既然是自动布局，那其中的属性必然和storyboard中的约束有着联系，这边简单做一个的映射关系。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>解释</th>
<th>对应autolayout</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>左边距</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669508280.png" width="146"></td>
</tr>
<tr>
<td>top</td>
<td>上边距</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669472710.png" width="146"></td>
</tr>
<tr>
<td>right</td>
<td>右边距</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669531488.png" width="146"></td>
</tr>
<tr>
<td>bottom</td>
<td>下边距</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669566802.png" width="146"></td>
</tr>
<tr>
<td>leading</td>
<td>顶部边距</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669612795.png" width="163"></td>
</tr>
<tr>
<td>trailing</td>
<td>尾部边距</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669636546.png" width="163"></td>
</tr>
<tr>
<td>width</td>
<td>宽度</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489673920736.png" width="146"></td>
</tr>
<tr>
<td>height</td>
<td>长度</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489673961316.png" width="146"></td>
</tr>
<tr>
<td>centerX</td>
<td>X轴居中</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669689828.png" width="163"></td>
</tr>
<tr>
<td>centerY</td>
<td>Y轴居中</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669716744.png" width="163"></td>
</tr>
<tr>
<td>baseline</td>
<td>基准线</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669740739.png" width="163"></td>
</tr>
<tr>
<td>edges</td>
<td>上左下右边距</td>
<td></td>
</tr>
<tr>
<td>size</td>
<td>长和宽</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>XY轴居中</td>
</tr>
</tbody>
</table>
<h3 id="例子用法："><a href="#例子用法：" class="headerlink" title="例子用法："></a>例子用法：</h3><p>要实现如图的布局</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489671939476.png" width="356"></p>
<p>在 xib 获取 storyboard 中可能是这样的</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489671578093.png" width="205"></p>
<p>使用Masnory可以如下键入代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">UIView *view1 = [UIView new];</div><div class="line">view1.backgroundColor = [UIColor blueColor];</div><div class="line">[self.view addSubview:view1];</div><div class="line"></div><div class="line">[view1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.top.equalTo(ws.view.mas_top).offset(10);</div><div class="line">    make.left.equalTo(ws.view.mas_left).offset(8);</div><div class="line">    make.size.mas_equalTo(CGSizeMake(100, 100));</div><div class="line">&#125;];</div><div class="line"></div><div class="line">UIView *view2 = [UIView new];</div><div class="line">view2.backgroundColor = [UIColor yellowColor];</div><div class="line">[self.view addSubview:view2];</div><div class="line"></div><div class="line">[view2 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.top.equalTo(view1.mas_top);</div><div class="line">    make.left.equalTo(view1.mas_right).offset(16);</div><div class="line">    make.right.equalTo(ws.view.mas_right).offset(-8);</div><div class="line">    make.height.equalTo(view1.mas_height);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>还有一些后续版本中加入的方法，是针对控制器（ViewControll）的，而不是针对 view 的。通常用于 navbar 和tabbar 相关 </p>
<ul>
<li>mas_topLayoutGuide   </li>
<li>mas_bottomLayoutGuide</li>
<li>mas_topLayoutGuideTop</li>
<li>mas_topLayoutGuideBottom</li>
<li>mas_bottomLayoutGuideTop</li>
<li>mas_bottomLayoutGuideBottom</li>
</ul>
<h2 id="一些比较有用的方法和属性"><a href="#一些比较有用的方法和属性" class="headerlink" title="一些比较有用的方法和属性"></a>一些比较有用的方法和属性</h2><h3 id="计算公共父容器方法"><a href="#计算公共父容器方法" class="headerlink" title="计算公共父容器方法"></a>计算公共父容器方法</h3><p><code>- (instancetype)mas_closestCommonSuperview:(MAS_VIEW *)view;</code></p>
<p>该方法是在<code>View+MASAdditions</code>中的，因此，该方法返回的是一个UIView。从官方的注解中看，该方法是寻找两个视图的最近的公共父视图。</p>
<p>例如：</p>
<p>在 <strong>viewA</strong> 上添加 <strong>viewB</strong> 和 <strong>viewC</strong> </p>
<p>在 <strong>viewB</strong> 上添加 <strong>viewD</strong> 和 <strong>viewE</strong></p>
<p>那么<strong>viewB</strong> 是 <strong>viewD</strong> 和 <strong>viewE</strong> 最近的公共父视图。<strong>viewA</strong> 是 <strong>viewD</strong> 和 <strong>viewC</strong> 最近的公共父视图</p>
<p>代码验证一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">UIView *viewA = [UIView new];</div><div class="line">[self.view addSubview:viewA];</div><div class="line"></div><div class="line">//===========================</div><div class="line"></div><div class="line">UIView *viewB = [UIView new];</div><div class="line">[viewA addSubview:viewB];</div><div class="line"></div><div class="line">UIView *viewC = [UIView new];</div><div class="line">[viewA addSubview:viewC];</div><div class="line"></div><div class="line">//===========================</div><div class="line"></div><div class="line">UIView *viewD = [UIView new];</div><div class="line">[viewB addSubview:viewD];</div><div class="line"></div><div class="line">UIView *viewE = [UIView new];</div><div class="line">[viewB addSubview:viewE];</div><div class="line"></div><div class="line">if ([[viewD mas_closestCommonSuperview:viewE] isEqual:viewB]) &#123;</div><div class="line">    NSLog(@&quot;viewB是viewD和viewE最近的父视图&quot;);</div><div class="line">&#125;else&#123;</div><div class="line">    NSLog(@&quot;viewB不是viewD和viewE最近的父视图&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">if ([[viewD mas_closestCommonSuperview:viewC] isEqual:viewA]) &#123;</div><div class="line">    NSLog(@&quot;viewA是viewD和viewC最近的父视图&quot;);</div><div class="line">&#125;else&#123;</div><div class="line">    NSLog(@&quot;viewA不是viewD和viewC最近的父视图&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[10276:1157366] viewB是最近的父视图</div><div class="line">[10276:1157366] viewA是最近的父视图</div></pre></td></tr></table></figure>
<h3 id="intrinsicContentSize"><a href="#intrinsicContentSize" class="headerlink" title="intrinsicContentSize"></a>intrinsicContentSize</h3><p>让 view 有一个默认的长和宽，他会根据约束来改变其值，类似于 <code>UILabel</code> 不过这也和约束优先级有关，<a href="http://blog.csdn.net/miao033009/article/details/46876973" target="_blank" rel="external">这里</a> 有篇文章介绍的不错。之前看到有人用它来做 <code>UITableViewCell</code> 的自适应，我觉得不是特别需要。如果项目需求是在 iOS8 以上的话，可以使用下面的方法来做自适应。</p>
<h3 id="UITableViewAutomaticDimension"><a href="#UITableViewAutomaticDimension" class="headerlink" title="UITableViewAutomaticDimension"></a>UITableViewAutomaticDimension</h3><p>iOS8以上的项目，如果 UITableView 不是特别复杂的话，可以使用 <code>UITableViewAutomaticDimension</code> 来进行适配。使用方法如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123;</div><div class="line">    return 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</div><div class="line">    return 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (CGFloat)tableView:(UITableView *)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    //预测高度</div><div class="line">    return 44;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    // 自动计算高度</div><div class="line">    return UITableViewAutomaticDimension;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;cell&quot; forIndexPath:indexPath];</div><div class="line">    </div><div class="line">    return cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这篇先总结到这里。后面持续更新一些UI上会使用到的小技巧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前段时间太忙。没有时间更新，把之前整理的东西再拿出来好好整理一遍。这篇主要接上文。整理一下Masnory的使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AutoLayout实战（实战二）</title>
    <link href="shaop.github.io/2016/09/04/autolayout%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>shaop.github.io/2016/09/04/autolayout实战（二）/</id>
    <published>2016-09-04T08:26:40.000Z</published>
    <updated>2016-09-04T11:17:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇中说了一下约束的使用方法，这篇再继续学习一下<code>Size Classes</code>。这个技术是在ios8之后才出现的。有限制的支持ios7。</p>
<p>我们先用一张图来反应一下这个东西能做出什么样的效果。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1preview.gif" alt="preview"></p>
<blockquote>
<p>gif稍微有点卡，配合虚拟机更卡，但在真机中的效果很棒，各个元素之间的切换都是有关联的。</p>
</blockquote>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>在正式开始实战之前，我们先了解一下<code>Size Classes</code>的一些基本知识和操作原理。</p>
<p>从上面的图我们可以看到，<code>Size Classes</code>主要负责设备在不同情况下的的显示效果。事实上，他不仅可以管理横竖屏的情况，甚至可以管理在各种设备上的显示效果  <strong>（ipad，iphone，ipad pro）</strong></p>
<h3 id="操作入口"><a href="#操作入口" class="headerlink" title="操作入口"></a>操作入口</h3><p>第一个问题肯定是从何入手：打开storyboard，我们在最下面的栏目中可以看到，<strong>wAny hAny</strong>的属性标示，点击我们就可以看到一个网格状的模块。<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.4%20image1.png" alt="image1"></p>
<p>随意组合，就可以看到面板中的控制器(ViewController)会发生样式变化</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>知道了操作的入口，现在需要弄懂的就是各个属性代表的是什么意思了</p>
<p>在图中我们看到了<strong>wAny hAny</strong>,那这个是什么意思呢？如果宽度(<strong>weight</strong>)设为Any，高度(<strong>height</strong>)设置为Regular，那么在该状态下的界面元素在只要height为Regular，无论weight是Regular还是Compact的状态中都会存在。这种关系应该叫做继承关系，具体的四种界面描述与可继承的界面描述如下：</p>
<ul>
<li>w:Compact h:Compact 继承 <strong>(w:Any h:Compact , w:Compact h:Any , w:Any h:Any)</strong></li>
<li>w:Regular h:Compact 继承 <strong>(w:Any h:Compact , w:Regular h:Any , w:Any h:Any)</strong></li>
<li>w:Compact h:Regular 继承 <strong>(w:Any h:Regular , w:Compact h:Any , w:Any h:Any)</strong></li>
<li>w:Regular h:Regular 继承 <strong>(w:Any h:Regular , w:Regular h:Any , w:Any h:Any)</strong></li>
</ul>
<blockquote>
<p>其实很好理解，就是一级一级往下。</p>
</blockquote>
<p>具体与屏幕之间的联系则如下：</p>
<ul>
<li><p>iPhone4S,iPhone5/5s,iPhone6</p>
<ul>
<li>竖屏：(w:Compact h:Regular)</li>
<li>横屏：(w:Compact h:Compact)</li>
</ul>
</li>
<li><p>iPhone6 Plus</p>
<ul>
<li>竖屏：(w:Compact h:Regular)</li>
<li>横屏：(w:Regular h:Compact)</li>
</ul>
</li>
<li><p>iPad</p>
<ul>
<li>竖屏：(w:Regular h:Regular)</li>
<li>横屏：(w:Regular h:Regular)</li>
</ul>
</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>紧接上一篇中的例子，目前的表现是所有状态下显示的效果都是如此，但是很明显，在这种情况下，将屏幕横放时，就会出现图片显示不全的现象<strong>（不使用scrollview的情况下）</strong>，这是很糟糕的用户体验，那我们现在要做的就是，对其横屏情况下进行修改，将<code>Size Classes</code>设置成 <code>wAny hCompact</code></p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.4%20image1.gif" alt="image2"></p>
<p>删除一些不必要的约束，这里注意，删除时对布局线按<code>cmd</code> + <code>del</code>，这样做的目的是，在该状态、以及其子类中删除该约束。而不删除其父类中的约束。<strong>简单的说，就是删除在横屏情况下不需要的约束</strong>。<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.4%20image2.gif" alt="image3"></p>
<p>调整布局的位置<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.4%20image3.gif" alt="image4"></p>
<p>为其添加新的属性</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.4%20image4.gif" alt="iamge5"></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>打开模拟器运行一下，按住<code>cmd</code> + <code>←</code>(或 <code>→</code>)可以切换模式，在真机中也可以尝试一下，效果会比模拟器好一点。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>很多同学都还是很喜欢手动代码布局，确实，手动代码布局的维护性会比在storyboard中更加棒，所以后面我在更新两篇我学习的手动代码布局  <strong><em>利用Masonry框架实现</em></strong> ，当然，原生的自动布局也会提到，不过不建议使用，代码量和其复杂性太高。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇中说了一下约束的使用方法，这篇再继续学习一下&lt;code&gt;Size Classes&lt;/code&gt;。这个技术是在ios8之后才出现的。有限制的支持ios7。&lt;/p&gt;
&lt;p&gt;我们先用一张图来反应一下这个东西能做出什么样的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http:/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AutoLayout使用（实战一）</title>
    <link href="shaop.github.io/2016/09/01/%E5%AE%9E%E6%88%98(%E4%B8%80)/"/>
    <id>shaop.github.io/2016/09/01/实战(一)/</id>
    <published>2016-09-01T01:44:09.000Z</published>
    <updated>2016-09-01T09:52:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>在开始之前，先看下我们要完成的效果图的样子。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/main.png" alt="main"></p>
<p>我们的目标是打算做成这个样子的一个页面。当然，这样简单的一个页面，使用<code>frame</code>,我相信很多同学也很快能够完成，但是，现在，让我们用<code>AutoLayout</code>来看下搭建这样一个页面，到底有简单呢？</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><code>AutoLayout</code>使用的是一种相对布局，和android的<code>RelativeLayout</code>有着很相似的地方。<br>接来下，先理一下思路。    这里，我用一张图来表达一下。<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/demo.png" alt="demo"></p>
<p>简单解释一下这张图：</p>
<ul>
<li>头像部分，左边和顶部距离屏幕20个单位，头像大小固定为40x40</li>
<li>姓名与时间，分别与头像的顶部与底部对齐，左边距离头像15个单位</li>
<li>大图，距离头像20个单位，左边与右边距离屏幕20个单位（这样就固定了图片的长），之后再让其长宽相等，这样就是一个正方形的图片了</li>
<li>底部正文文字，左边距离屏幕20个单位，顶部距离图片20个单位。</li>
</ul>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>知道了如何布局，那现在就开始实践吧～<br>打开XCode,新建一个工程。打开<code>storyboard</code>。为了美观，可以为原有的<code>ViewController</code>加入一个<code>NavigationController</code>。接下来，将我们需要的控件拖入进来。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1step1.gif" alt="9.1step1"></p>
<h3 id="头部试图"><a href="#头部试图" class="headerlink" title="头部试图"></a>头部试图</h3><p>选中图片，点击右下角的pin按钮，对其进行约束的添加。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1step2.gif" alt="9.1.1step2"></p>
<p>继续对两边的文字进行约束的添加。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1step3.gif" alt="9.1.2step3"></p>
<h3 id="主要部分"><a href="#主要部分" class="headerlink" title="主要部分"></a>主要部分</h3><p>选中中间的图片。对其进行约束的添加。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1step4.gif" alt="9.1.3step4"></p>
<p>选中最后的文字，对其进行约束的添加。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1step5.gif" alt="9.1.4step5"></p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>现在，我们就对这样一个布局添加好约束了！给图片们添加一些属性，打开模拟器看一下，在各个屏幕中都有良好的现实效果。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1step6.gif" alt="9.1.5step6"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;预览&quot;&gt;&lt;a href=&quot;#预览&quot; class=&quot;headerlink&quot; title=&quot;预览&quot;&gt;&lt;/a&gt;预览&lt;/h2&gt;&lt;p&gt;在开始之前，先看下我们要完成的效果图的样子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkl1p.com1.z0.glb.clou
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AutoLayout的使用</title>
    <link href="shaop.github.io/2016/08/31/autolayout%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>shaop.github.io/2016/08/31/autolayout的使用/</id>
    <published>2016-08-31T12:14:19.000Z</published>
    <updated>2016-08-31T12:37:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信很多同学在刚接触ios开发的时候，非常熟悉这句代码</p>
<p><code>initWithFrame:CGRectMake(0, 0, 20, 20)</code></p>
<p>这是很多人刚刚开始学会布局的时候使用的一种布局方式，没错，我也是。这种布局方式很适合刚入门的开发者，<code>frame</code>将控件的位置用一种绝对位置的方式固定在屏幕中。如下图。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/frame.png" alt="frame图解"> </p>
<p>如图的例子就是将一个60x60的控件放置在 <strong>x轴座标为20，y轴座标为20</strong>的区域中。</p>
<blockquote>
<p>这种方式在iPhone 4之前的年代十分合适，因为屏幕大小确定，开发者只需要确定绝对位置，就能很方便的布局了。在屏幕多样化的现在，依旧很多人使用这种方式，但是需要加入一定的计算。获取屏幕宽度，用比例去计算大小。</p>
</blockquote>
<h2 id="为什么使用AutoLayout"><a href="#为什么使用AutoLayout" class="headerlink" title="为什么使用AutoLayout"></a>为什么使用AutoLayout</h2><p>之前也说过，使用<code>frame</code>的方式，难以做出很好的屏幕适配，甚至需要一定的计算量。那在现在屏幕分辨率碎片化越来越严重的时代，我们应该找到一种能一套方案，解决所有屏幕布局的方法。</p>
<p>没错，那就是<code>AutoLayout</code>。</p>
<h2 id="什么是AutoLayout"><a href="#什么是AutoLayout" class="headerlink" title="什么是AutoLayout"></a>什么是AutoLayout</h2><p><code>AutoLayout</code>，让开发者能用一个设计来适配所有屏幕，从理论上来说，可以做到iPhone 4到iPad pro的所有屏幕适配。<strong><em>当然，我这里说的是理论上，也有可能会出现意外</em></strong> </p>
<p><code>AutoLayout</code>意图让开发者忘记屏幕本身的尺寸，使用任意一个画布，利用约束（constraint）来进行对各个控件之间的距离，长宽进行控制。利用上面同样一张图控件的位置，我们可以来进行对比。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/autolayout.png" alt="autolayout图解"></p>
<p>如图所示，我们可以根据我们所需要的实际情况，利用不同的方式来进行对控件的约束。</p>
<h2 id="相关约束属性"><a href="#相关约束属性" class="headerlink" title="相关约束属性"></a>相关约束属性</h2><ul>
<li>left</li>
<li>right</li>
<li>width</li>
<li>height</li>
<li>bottom</li>
<li>top</li>
<li>leading</li>
<li>trailing</li>
<li>centerX</li>
<li>centerY</li>
<li>baseLine</li>
</ul>
<p>这里我用一张图来更加直观得反应这些约束的实际意义</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/Constraint.png" alt="constraint图解"></p>
<p>有了这些属性，我们就能轻松定义控件与控件之间的关系啦！</p>
<p>这里有一点值得注意，<code>leading</code>和<code>trailing</code>  这两个属性似乎与<code>left</code>和<code>right</code>很相似。确实，在大部分情况下，这两个属性的意义确实是相同的，他们存在的意义在于不同语言环境下。有些国家，或者说中国古代的书写顺序是和现在相反的，<strong>即从右往左的写法</strong>(正常情况是从左往右)。具体情况如下图。<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/leding%E5%92%8Ctrailing.png" alt="leading and trailing 图解"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>简单得介绍了autolayout，图都是我自己一点点画的，希望能对autolayout的一无所知同学有一定帮助，后面我会再更新两篇文章，来结合实际开发来具体讲述下实战中的运用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多同学在刚接触ios开发的时候，非常熟悉这句代码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;initWithFrame:CGRectMake(0, 0, 20, 20)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是很多人刚刚开始学会布局的时候使用的一种布局方式，没错，我也是。这种布局方式很适合刚
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的移动开发学习</title>
    <link href="shaop.github.io/2016/08/31/%E6%88%91%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    <id>shaop.github.io/2016/08/31/我的移动开发学习/</id>
    <published>2016-08-31T12:14:18.000Z</published>
    <updated>2016-08-31T12:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在我是一名准<strong>大四</strong>计算机学院学生，我的大学并不出色，是属于我们这边比较三流的学校，大一并没有相关专业课程，因此，我的编程生涯可以算是从<strong>大二</strong>才开始的。</p>
<blockquote>
<p>这里还有个小插曲，大一的时候，我大胆得冲进一个老师的办公室，和她说<strong>“我要写代码，我要写项目。”</strong>所有的一切，都是从我开口说这句话开始。也是因为这句话，我成了她在我们这一届最骄傲的学生（后来发现她并不是我专业的老师，由于跟了她，我也在我们专业被拉入黑名单）</p>
</blockquote>
<h2 id="学习之路"><a href="#学习之路" class="headerlink" title="学习之路"></a>学习之路</h2><p>学习移动开发，是我刚接触智能机的时候就萌发的一个理想，现在，我能为此工作，为此学习，也十分开心。</p>
<h4 id="一切从兴趣入手"><a href="#一切从兴趣入手" class="headerlink" title="一切从兴趣入手"></a>一切从兴趣入手</h4><p>对于移动开发，在我们学校没有相关专业课程去教学，我的学习之旅也完全是从兴趣入手，当时我特别喜欢<code>ios</code>开发，但是由于学校苹果机房的限制，也听从了导师的安排，首先先开始学习了<code>android</code>开发。</p>
<p>大二由于要参加一些外包，ACM，电商竞赛，也让我不得不进入了疯狂的学习阶段，学习进度在一些学长的带领下，进步很快。</p>
<h4 id="辉煌时刻"><a href="#辉煌时刻" class="headerlink" title="辉煌时刻"></a>辉煌时刻</h4><p>非常不容易，大二的一年过的很辛苦，各种压力把我压的喘不起来，但是黄天不负苦心人，我在大二那年，也获得了不少成就，在各类省赛中，也拿到了不错的成绩。也成功成为了本届第一批免毕业设计的学生。</p>
<h4 id="膨胀"><a href="#膨胀" class="headerlink" title="膨胀"></a>膨胀</h4><p>大二一年很快过去，我凭借着手上为数不多的项目，开始找工作，也很顺利在暑期的时候就有了第一份工作，也是在那个时候，开始接触了<code>ios</code>，我也深深被它所吸引，并且在公司，我的学习和上升速度很快，很快就独立完成了第一个在apple store上架的作品。那时候开始慢慢萌发了<strong>编程不过如此的想法</strong>。</p>
<h4 id="盲目"><a href="#盲目" class="headerlink" title="盲目"></a>盲目</h4><p>大三开始了，我在辅导员和朋友的鼓舞下，进入了学生干部的生涯，当上了一名部长，也成为一名主席。开始在兼顾工作的同时，监管各种学生事务，开始盲目觉得自己很强。虽然在半年的时间，我也上架了一款app。但是殊不知，我已经开始慢慢堕落了。</p>
<h4 id="打击"><a href="#打击" class="headerlink" title="打击"></a>打击</h4><ol>
<li>第一次打击是在大三下的时候，我带着我的学弟学妹，和我的一个<strong>好基友</strong>开始了漫长的竞赛，但是没有想到的是，付出了比之前更多的努力，换来的是比之前更差的成绩。</li>
<li>第二次打击，是在一次与一位前辈的谈话中，这位前辈是从海外留学回来的，我当时的想法就是，一个项目，应该尽可能使用开源框架，来节约时间，也更方便开发者去实现，但是他给了我一个微笑，问我，“你说你很熟悉开源框架，那你读过<code>AFNetworking</code>的源码吗？”，说句实话，我当时傻了。</li>
<li>之后的打击也是数不胜数，从一些知名博客，知乎，简书，等等我也知道了很多不足。这里我也举一些例子。<ul>
<li>对<code>Objective-C</code>要有足够得了解，OC是如何基于C来进行的封装？</li>
<li>对于UI,稍微深一点的会了吗？比如，侧边栏的菜单滑出的原理？</li>
<li>动画会了吗？为什么<code>CALayer</code>会产生隐式动画？</li>
<li>各种安全机制懂了吗？</li>
<li>….</li>
</ul>
</li>
<li>我第一次看到上面这些问题的时候，我真的觉得打击很大，也是直到最后，我向各大公司投递简历的时候，简历石沉大海，我才明白了，我还差的很远。</li>
</ol>
<h4 id="醒悟"><a href="#醒悟" class="headerlink" title="醒悟"></a>醒悟</h4><p>现在也快大四开始了，相比较其他很多优秀的大四学生，我应该落后了不少，大三这一年，我不能说我完全荒废了，但确实没有什么大的成长，这个假期，我也在一家技术公司工作，在闲余时间，我也学习不少东西，我是因为热爱才去学习，我觉得现在醒悟还不算晚。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最后我想说一下，我是一个热爱编程的<strong>逗比</strong>，平时活得也比较开心，但是我是一个对<strong>应用品质</strong>很严格的人。我喜欢很多细节把控很好的应用，我也致力于打造这些细节打动用户的应用，之后我会不断更新一些我的学习心得，也会不定期奉上一些酷炫的控件。<strong>真正的学习，从现在开始</strong>。</p>
<blockquote>
<p>第一次写文章，写的不好，请勿见怪。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在我是一名准&lt;strong&gt;大四&lt;/strong&gt;计算机学院学生，我的大学并不出色，是属于我们这边比较三流的学校，大一并没有相关专业课程，因此，我的编程生涯可以算是从&lt;strong&gt;大二&lt;/strong&gt;才开始的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里还有个小插曲
    
    </summary>
    
    
  </entry>
  
</feed>
