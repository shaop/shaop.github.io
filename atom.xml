<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shaop的博客</title>
  <subtitle>better</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="shaop.github.io/"/>
  <updated>2017-03-16T15:59:55.000Z</updated>
  <id>shaop.github.io/</id>
  
  <author>
    <name>shaop</name>
    <email>sxp644645107@gamil.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Masnory与自动布局的故事</title>
    <link href="shaop.github.io/2017/03/16/Masnory/"/>
    <id>shaop.github.io/2017/03/16/Masnory/</id>
    <published>2017-03-16T12:29:45.000Z</published>
    <updated>2017-03-16T15:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前段时间太忙。没有时间更新，把之前整理的东西再拿出来好好整理一遍。这篇主要接上文。整理一下Masnory的使用。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用苹果自带的<strong>xib</strong>或者<strong>storyboard</strong>必然有很多方便的地方，但是仍然有时无法避免有些做不到的事情，或者做起来没有那么方便的事情，这时候代码布局就显得很重要了。关于Masnory的教程，网上有很多，这里先列举一些。</p>
<ul>
<li><a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">学习官方文档总是没有错的</a></li>
<li><a href="http://www.cocoachina.com/ios/20141219/10702.html" target="_blank" rel="external">CocoaChina 的 Masnory 教程</a></li>
</ul>
<p>在这里，简单总结一些Masnory的方法，以及一些不太用到的方法。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>在阅读完并完成相关安装步骤后，可以先从Masnory类的方法和属性来看起。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>先是3个基础方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//设置约束</div><div class="line">- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *make))block;</div><div class="line"></div><div class="line">//更新约束</div><div class="line">- (NSArray *)mas_updateConstraints:(void(^)(MASConstraintMaker *make))block;</div><div class="line"></div><div class="line">//重新设置约束</div><div class="line">- (NSArray *)mas_remakeConstraints:(void(^)(MASConstraintMaker *make))block;</div></pre></td></tr></table></figure>
<p>使用如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  _businessLabel = [UILabel new];</div><div class="line">  [self addSubview:_businessLabel];</div><div class="line">  </div><div class="line">  //设置约束</div><div class="line">  [_businessLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">//设置一些约束</div><div class="line">  &#125;];</div><div class="line"></div><div class="line">  //更新约束</div><div class="line">  [_businessLabel mas_updateConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">//设置一些约束</div><div class="line">  &#125;];</div><div class="line"></div><div class="line">  //重新设置约束</div><div class="line">  [_businessLabel mas_remakeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">//设置一些约束</div><div class="line">  &#125;];</div></pre></td></tr></table></figure>
<p>掌握着三个方法，基本上就能掌握日常使用的一些基本布局了</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>既然是自动布局，那其中的属性必然和storyboard中的约束有着联系，这边简单做一个的映射关系。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>解释</th>
<th>对应autolayout</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>左边距</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669508280.png" width="146"></td>
</tr>
<tr>
<td>top</td>
<td>上边距</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669472710.png" width="146"></td>
</tr>
<tr>
<td>right</td>
<td>右边距</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669531488.png" width="146"></td>
</tr>
<tr>
<td>bottom</td>
<td>下边距</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669566802.png" width="146"></td>
</tr>
<tr>
<td>leading</td>
<td>顶部边距</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669612795.png" width="163"></td>
</tr>
<tr>
<td>trailing</td>
<td>尾部边距</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669636546.png" width="163"></td>
</tr>
<tr>
<td>width</td>
<td>宽度</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489673920736.png" width="146"></td>
</tr>
<tr>
<td>height</td>
<td>长度</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489673961316.png" width="146"></td>
</tr>
<tr>
<td>centerX</td>
<td>X轴居中</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669689828.png" width="163"></td>
</tr>
<tr>
<td>centerY</td>
<td>Y轴居中</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669716744.png" width="163"></td>
</tr>
<tr>
<td>baseline</td>
<td>基准线</td>
<td><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489669740739.png" width="163"></td>
</tr>
<tr>
<td>edges</td>
<td>上左下右边距</td>
<td></td>
</tr>
<tr>
<td>size</td>
<td>长和宽</td>
<td></td>
</tr>
<tr>
<td>center</td>
<td>XY轴居中</td>
</tr>
</tbody>
</table>
<h3 id="例子用法："><a href="#例子用法：" class="headerlink" title="例子用法："></a>例子用法：</h3><p>要实现如图的布局</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489671939476.png" width="356"></p>
<p>在 xib 获取 storyboard 中可能是这样的</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/img/1489671578093.png" width="205"></p>
<p>使用Masnory可以如下键入代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">UIView *view1 = [UIView new];</div><div class="line">view1.backgroundColor = [UIColor blueColor];</div><div class="line">[self.view addSubview:view1];</div><div class="line"></div><div class="line">[view1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.top.equalTo(ws.view.mas_top).offset(10);</div><div class="line">    make.left.equalTo(ws.view.mas_left).offset(8);</div><div class="line">    make.size.mas_equalTo(CGSizeMake(100, 100));</div><div class="line">&#125;];</div><div class="line"></div><div class="line">UIView *view2 = [UIView new];</div><div class="line">view2.backgroundColor = [UIColor yellowColor];</div><div class="line">[self.view addSubview:view2];</div><div class="line"></div><div class="line">[view2 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.top.equalTo(view1.mas_top);</div><div class="line">    make.left.equalTo(view1.mas_right).offset(16);</div><div class="line">    make.right.equalTo(ws.view.mas_right).offset(-8);</div><div class="line">    make.height.equalTo(view1.mas_height);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>还有一些后续版本中加入的方法，是针对控制器（ViewControll）的，而不是针对 view 的。通常用于 navbar 和tabbar 相关 </p>
<ul>
<li>mas_topLayoutGuide   </li>
<li>mas_bottomLayoutGuide</li>
<li>mas_topLayoutGuideTop</li>
<li>mas_topLayoutGuideBottom</li>
<li>mas_bottomLayoutGuideTop</li>
<li>mas_bottomLayoutGuideBottom</li>
</ul>
<h2 id="一些比较有用的方法和属性"><a href="#一些比较有用的方法和属性" class="headerlink" title="一些比较有用的方法和属性"></a>一些比较有用的方法和属性</h2><h3 id="计算公共父容器方法"><a href="#计算公共父容器方法" class="headerlink" title="计算公共父容器方法"></a>计算公共父容器方法</h3><p><code>- (instancetype)mas_closestCommonSuperview:(MAS_VIEW *)view;</code></p>
<p>该方法是在<code>View+MASAdditions</code>中的，因此，该方法返回的是一个UIView。从官方的注解中看，该方法是寻找两个视图的最近的公共父视图。</p>
<p>例如：</p>
<p>在 <strong>viewA</strong> 上添加 <strong>viewB</strong> 和 <strong>viewC</strong> </p>
<p>在 <strong>viewB</strong> 上添加 <strong>viewD</strong> 和 <strong>viewE</strong></p>
<p>那么<strong>viewB</strong> 是 <strong>viewD</strong> 和 <strong>viewE</strong> 最近的公共父视图。<strong>viewA</strong> 是 <strong>viewD</strong> 和 <strong>viewC</strong> 最近的公共父视图</p>
<p>代码验证一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">UIView *viewA = [UIView new];</div><div class="line">[self.view addSubview:viewA];</div><div class="line"></div><div class="line">//===========================</div><div class="line"></div><div class="line">UIView *viewB = [UIView new];</div><div class="line">[viewA addSubview:viewB];</div><div class="line"></div><div class="line">UIView *viewC = [UIView new];</div><div class="line">[viewA addSubview:viewC];</div><div class="line"></div><div class="line">//===========================</div><div class="line"></div><div class="line">UIView *viewD = [UIView new];</div><div class="line">[viewB addSubview:viewD];</div><div class="line"></div><div class="line">UIView *viewE = [UIView new];</div><div class="line">[viewB addSubview:viewE];</div><div class="line"></div><div class="line">if ([[viewD mas_closestCommonSuperview:viewE] isEqual:viewB]) &#123;</div><div class="line">    NSLog(@&quot;viewB是viewD和viewE最近的父视图&quot;);</div><div class="line">&#125;else&#123;</div><div class="line">    NSLog(@&quot;viewB不是viewD和viewE最近的父视图&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">if ([[viewD mas_closestCommonSuperview:viewC] isEqual:viewA]) &#123;</div><div class="line">    NSLog(@&quot;viewA是viewD和viewC最近的父视图&quot;);</div><div class="line">&#125;else&#123;</div><div class="line">    NSLog(@&quot;viewA不是viewD和viewC最近的父视图&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[10276:1157366] viewB是最近的父视图</div><div class="line">[10276:1157366] viewA是最近的父视图</div></pre></td></tr></table></figure>
<h3 id="intrinsicContentSize"><a href="#intrinsicContentSize" class="headerlink" title="intrinsicContentSize"></a>intrinsicContentSize</h3><p>让 view 有一个默认的长和宽，他会根据约束来改变其值，类似于 <code>UILabel</code> 不过这也和约束优先级有关，<a href="http://blog.csdn.net/miao033009/article/details/46876973" target="_blank" rel="external">这里</a> 有篇文章介绍的不错。之前看到有人用它来做 <code>UITableViewCell</code> 的自适应，我觉得不是特别需要。如果项目需求是在 iOS8 以上的话，可以使用下面的方法来做自适应。</p>
<h3 id="UITableViewAutomaticDimension"><a href="#UITableViewAutomaticDimension" class="headerlink" title="UITableViewAutomaticDimension"></a>UITableViewAutomaticDimension</h3><p>iOS8以上的项目，如果 UITableView 不是特别复杂的话，可以使用 <code>UITableViewAutomaticDimension</code> 来进行适配。使用方法如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123;</div><div class="line">    return 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</div><div class="line">    return 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (CGFloat)tableView:(UITableView *)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    //预测高度</div><div class="line">    return 44;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    // 自动计算高度</div><div class="line">    return UITableViewAutomaticDimension;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;cell&quot; forIndexPath:indexPath];</div><div class="line">    </div><div class="line">    return cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这篇先总结到这里。后面持续更新一些UI上会使用到的小技巧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前段时间太忙。没有时间更新，把之前整理的东西再拿出来好好整理一遍。这篇主要接上文。整理一下Masnory的使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AutoLayout实战（实战二）</title>
    <link href="shaop.github.io/2016/09/04/autolayout%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>shaop.github.io/2016/09/04/autolayout实战（二）/</id>
    <published>2016-09-04T08:26:40.000Z</published>
    <updated>2016-09-04T11:17:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇中说了一下约束的使用方法，这篇再继续学习一下<code>Size Classes</code>。这个技术是在ios8之后才出现的。有限制的支持ios7。</p>
<p>我们先用一张图来反应一下这个东西能做出什么样的效果。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1preview.gif" alt="preview"></p>
<blockquote>
<p>gif稍微有点卡，配合虚拟机更卡，但在真机中的效果很棒，各个元素之间的切换都是有关联的。</p>
</blockquote>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>在正式开始实战之前，我们先了解一下<code>Size Classes</code>的一些基本知识和操作原理。</p>
<p>从上面的图我们可以看到，<code>Size Classes</code>主要负责设备在不同情况下的的显示效果。事实上，他不仅可以管理横竖屏的情况，甚至可以管理在各种设备上的显示效果  <strong>（ipad，iphone，ipad pro）</strong></p>
<h3 id="操作入口"><a href="#操作入口" class="headerlink" title="操作入口"></a>操作入口</h3><p>第一个问题肯定是从何入手：打开storyboard，我们在最下面的栏目中可以看到，<strong>wAny hAny</strong>的属性标示，点击我们就可以看到一个网格状的模块。<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.4%20image1.png" alt="image1"></p>
<p>随意组合，就可以看到面板中的控制器(ViewController)会发生样式变化</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>知道了操作的入口，现在需要弄懂的就是各个属性代表的是什么意思了</p>
<p>在图中我们看到了<strong>wAny hAny</strong>,那这个是什么意思呢？如果宽度(<strong>weight</strong>)设为Any，高度(<strong>height</strong>)设置为Regular，那么在该状态下的界面元素在只要height为Regular，无论weight是Regular还是Compact的状态中都会存在。这种关系应该叫做继承关系，具体的四种界面描述与可继承的界面描述如下：</p>
<ul>
<li>w:Compact h:Compact 继承 <strong>(w:Any h:Compact , w:Compact h:Any , w:Any h:Any)</strong></li>
<li>w:Regular h:Compact 继承 <strong>(w:Any h:Compact , w:Regular h:Any , w:Any h:Any)</strong></li>
<li>w:Compact h:Regular 继承 <strong>(w:Any h:Regular , w:Compact h:Any , w:Any h:Any)</strong></li>
<li>w:Regular h:Regular 继承 <strong>(w:Any h:Regular , w:Regular h:Any , w:Any h:Any)</strong></li>
</ul>
<blockquote>
<p>其实很好理解，就是一级一级往下。</p>
</blockquote>
<p>具体与屏幕之间的联系则如下：</p>
<ul>
<li><p>iPhone4S,iPhone5/5s,iPhone6</p>
<ul>
<li>竖屏：(w:Compact h:Regular)</li>
<li>横屏：(w:Compact h:Compact)</li>
</ul>
</li>
<li><p>iPhone6 Plus</p>
<ul>
<li>竖屏：(w:Compact h:Regular)</li>
<li>横屏：(w:Regular h:Compact)</li>
</ul>
</li>
<li><p>iPad</p>
<ul>
<li>竖屏：(w:Regular h:Regular)</li>
<li>横屏：(w:Regular h:Regular)</li>
</ul>
</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>紧接上一篇中的例子，目前的表现是所有状态下显示的效果都是如此，但是很明显，在这种情况下，将屏幕横放时，就会出现图片显示不全的现象<strong>（不使用scrollview的情况下）</strong>，这是很糟糕的用户体验，那我们现在要做的就是，对其横屏情况下进行修改，将<code>Size Classes</code>设置成 <code>wAny hCompact</code></p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.4%20image1.gif" alt="image2"></p>
<p>删除一些不必要的约束，这里注意，删除时对布局线按<code>cmd</code> + <code>del</code>，这样做的目的是，在该状态、以及其子类中删除该约束。而不删除其父类中的约束。<strong>简单的说，就是删除在横屏情况下不需要的约束</strong>。<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.4%20image2.gif" alt="image3"></p>
<p>调整布局的位置<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.4%20image3.gif" alt="image4"></p>
<p>为其添加新的属性</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.4%20image4.gif" alt="iamge5"></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>打开模拟器运行一下，按住<code>cmd</code> + <code>←</code>(或 <code>→</code>)可以切换模式，在真机中也可以尝试一下，效果会比模拟器好一点。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>很多同学都还是很喜欢手动代码布局，确实，手动代码布局的维护性会比在storyboard中更加棒，所以后面我在更新两篇我学习的手动代码布局  <strong><em>利用Masonry框架实现</em></strong> ，当然，原生的自动布局也会提到，不过不建议使用，代码量和其复杂性太高。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇中说了一下约束的使用方法，这篇再继续学习一下&lt;code&gt;Size Classes&lt;/code&gt;。这个技术是在ios8之后才出现的。有限制的支持ios7。&lt;/p&gt;
&lt;p&gt;我们先用一张图来反应一下这个东西能做出什么样的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http:/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AutoLayout使用（实战一）</title>
    <link href="shaop.github.io/2016/09/01/%E5%AE%9E%E6%88%98(%E4%B8%80)/"/>
    <id>shaop.github.io/2016/09/01/实战(一)/</id>
    <published>2016-09-01T01:44:09.000Z</published>
    <updated>2016-09-01T09:52:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>在开始之前，先看下我们要完成的效果图的样子。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/main.png" alt="main"></p>
<p>我们的目标是打算做成这个样子的一个页面。当然，这样简单的一个页面，使用<code>frame</code>,我相信很多同学也很快能够完成，但是，现在，让我们用<code>AutoLayout</code>来看下搭建这样一个页面，到底有简单呢？</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><code>AutoLayout</code>使用的是一种相对布局，和android的<code>RelativeLayout</code>有着很相似的地方。<br>接来下，先理一下思路。    这里，我用一张图来表达一下。<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/demo.png" alt="demo"></p>
<p>简单解释一下这张图：</p>
<ul>
<li>头像部分，左边和顶部距离屏幕20个单位，头像大小固定为40x40</li>
<li>姓名与时间，分别与头像的顶部与底部对齐，左边距离头像15个单位</li>
<li>大图，距离头像20个单位，左边与右边距离屏幕20个单位（这样就固定了图片的长），之后再让其长宽相等，这样就是一个正方形的图片了</li>
<li>底部正文文字，左边距离屏幕20个单位，顶部距离图片20个单位。</li>
</ul>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>知道了如何布局，那现在就开始实践吧～<br>打开XCode,新建一个工程。打开<code>storyboard</code>。为了美观，可以为原有的<code>ViewController</code>加入一个<code>NavigationController</code>。接下来，将我们需要的控件拖入进来。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1step1.gif" alt="9.1step1"></p>
<h3 id="头部试图"><a href="#头部试图" class="headerlink" title="头部试图"></a>头部试图</h3><p>选中图片，点击右下角的pin按钮，对其进行约束的添加。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1step2.gif" alt="9.1.1step2"></p>
<p>继续对两边的文字进行约束的添加。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1step3.gif" alt="9.1.2step3"></p>
<h3 id="主要部分"><a href="#主要部分" class="headerlink" title="主要部分"></a>主要部分</h3><p>选中中间的图片。对其进行约束的添加。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1step4.gif" alt="9.1.3step4"></p>
<p>选中最后的文字，对其进行约束的添加。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1step5.gif" alt="9.1.4step5"></p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>现在，我们就对这样一个布局添加好约束了！给图片们添加一些属性，打开模拟器看一下，在各个屏幕中都有良好的现实效果。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/9.1step6.gif" alt="9.1.5step6"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;预览&quot;&gt;&lt;a href=&quot;#预览&quot; class=&quot;headerlink&quot; title=&quot;预览&quot;&gt;&lt;/a&gt;预览&lt;/h2&gt;&lt;p&gt;在开始之前，先看下我们要完成的效果图的样子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xkl1p.com1.z0.glb.clou
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AutoLayout的使用</title>
    <link href="shaop.github.io/2016/08/31/autolayout%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>shaop.github.io/2016/08/31/autolayout的使用/</id>
    <published>2016-08-31T12:14:19.000Z</published>
    <updated>2016-08-31T12:37:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信很多同学在刚接触ios开发的时候，非常熟悉这句代码</p>
<p><code>initWithFrame:CGRectMake(0, 0, 20, 20)</code></p>
<p>这是很多人刚刚开始学会布局的时候使用的一种布局方式，没错，我也是。这种布局方式很适合刚入门的开发者，<code>frame</code>将控件的位置用一种绝对位置的方式固定在屏幕中。如下图。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/frame.png" alt="frame图解"> </p>
<p>如图的例子就是将一个60x60的控件放置在 <strong>x轴座标为20，y轴座标为20</strong>的区域中。</p>
<blockquote>
<p>这种方式在iPhone 4之前的年代十分合适，因为屏幕大小确定，开发者只需要确定绝对位置，就能很方便的布局了。在屏幕多样化的现在，依旧很多人使用这种方式，但是需要加入一定的计算。获取屏幕宽度，用比例去计算大小。</p>
</blockquote>
<h2 id="为什么使用AutoLayout"><a href="#为什么使用AutoLayout" class="headerlink" title="为什么使用AutoLayout"></a>为什么使用AutoLayout</h2><p>之前也说过，使用<code>frame</code>的方式，难以做出很好的屏幕适配，甚至需要一定的计算量。那在现在屏幕分辨率碎片化越来越严重的时代，我们应该找到一种能一套方案，解决所有屏幕布局的方法。</p>
<p>没错，那就是<code>AutoLayout</code>。</p>
<h2 id="什么是AutoLayout"><a href="#什么是AutoLayout" class="headerlink" title="什么是AutoLayout"></a>什么是AutoLayout</h2><p><code>AutoLayout</code>，让开发者能用一个设计来适配所有屏幕，从理论上来说，可以做到iPhone 4到iPad pro的所有屏幕适配。<strong><em>当然，我这里说的是理论上，也有可能会出现意外</em></strong> </p>
<p><code>AutoLayout</code>意图让开发者忘记屏幕本身的尺寸，使用任意一个画布，利用约束（constraint）来进行对各个控件之间的距离，长宽进行控制。利用上面同样一张图控件的位置，我们可以来进行对比。</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/autolayout.png" alt="autolayout图解"></p>
<p>如图所示，我们可以根据我们所需要的实际情况，利用不同的方式来进行对控件的约束。</p>
<h2 id="相关约束属性"><a href="#相关约束属性" class="headerlink" title="相关约束属性"></a>相关约束属性</h2><ul>
<li>left</li>
<li>right</li>
<li>width</li>
<li>height</li>
<li>bottom</li>
<li>top</li>
<li>leading</li>
<li>trailing</li>
<li>centerX</li>
<li>centerY</li>
<li>baseLine</li>
</ul>
<p>这里我用一张图来更加直观得反应这些约束的实际意义</p>
<p><img src="http://7xkl1p.com1.z0.glb.clouddn.com/Constraint.png" alt="constraint图解"></p>
<p>有了这些属性，我们就能轻松定义控件与控件之间的关系啦！</p>
<p>这里有一点值得注意，<code>leading</code>和<code>trailing</code>  这两个属性似乎与<code>left</code>和<code>right</code>很相似。确实，在大部分情况下，这两个属性的意义确实是相同的，他们存在的意义在于不同语言环境下。有些国家，或者说中国古代的书写顺序是和现在相反的，<strong>即从右往左的写法</strong>(正常情况是从左往右)。具体情况如下图。<br><img src="http://7xkl1p.com1.z0.glb.clouddn.com/leding%E5%92%8Ctrailing.png" alt="leading and trailing 图解"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>简单得介绍了autolayout，图都是我自己一点点画的，希望能对autolayout的一无所知同学有一定帮助，后面我会再更新两篇文章，来结合实际开发来具体讲述下实战中的运用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多同学在刚接触ios开发的时候，非常熟悉这句代码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;initWithFrame:CGRectMake(0, 0, 20, 20)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是很多人刚刚开始学会布局的时候使用的一种布局方式，没错，我也是。这种布局方式很适合刚
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的移动开发学习</title>
    <link href="shaop.github.io/2016/08/31/%E6%88%91%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    <id>shaop.github.io/2016/08/31/我的移动开发学习/</id>
    <published>2016-08-31T12:14:18.000Z</published>
    <updated>2016-08-31T12:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在我是一名准<strong>大四</strong>计算机学院学生，我的大学并不出色，是属于我们这边比较三流的学校，大一并没有相关专业课程，因此，我的编程生涯可以算是从<strong>大二</strong>才开始的。</p>
<blockquote>
<p>这里还有个小插曲，大一的时候，我大胆得冲进一个老师的办公室，和她说<strong>“我要写代码，我要写项目。”</strong>所有的一切，都是从我开口说这句话开始。也是因为这句话，我成了她在我们这一届最骄傲的学生（后来发现她并不是我专业的老师，由于跟了她，我也在我们专业被拉入黑名单）</p>
</blockquote>
<h2 id="学习之路"><a href="#学习之路" class="headerlink" title="学习之路"></a>学习之路</h2><p>学习移动开发，是我刚接触智能机的时候就萌发的一个理想，现在，我能为此工作，为此学习，也十分开心。</p>
<h4 id="一切从兴趣入手"><a href="#一切从兴趣入手" class="headerlink" title="一切从兴趣入手"></a>一切从兴趣入手</h4><p>对于移动开发，在我们学校没有相关专业课程去教学，我的学习之旅也完全是从兴趣入手，当时我特别喜欢<code>ios</code>开发，但是由于学校苹果机房的限制，也听从了导师的安排，首先先开始学习了<code>android</code>开发。</p>
<p>大二由于要参加一些外包，ACM，电商竞赛，也让我不得不进入了疯狂的学习阶段，学习进度在一些学长的带领下，进步很快。</p>
<h4 id="辉煌时刻"><a href="#辉煌时刻" class="headerlink" title="辉煌时刻"></a>辉煌时刻</h4><p>非常不容易，大二的一年过的很辛苦，各种压力把我压的喘不起来，但是黄天不负苦心人，我在大二那年，也获得了不少成就，在各类省赛中，也拿到了不错的成绩。也成功成为了本届第一批免毕业设计的学生。</p>
<h4 id="膨胀"><a href="#膨胀" class="headerlink" title="膨胀"></a>膨胀</h4><p>大二一年很快过去，我凭借着手上为数不多的项目，开始找工作，也很顺利在暑期的时候就有了第一份工作，也是在那个时候，开始接触了<code>ios</code>，我也深深被它所吸引，并且在公司，我的学习和上升速度很快，很快就独立完成了第一个在apple store上架的作品。那时候开始慢慢萌发了<strong>编程不过如此的想法</strong>。</p>
<h4 id="盲目"><a href="#盲目" class="headerlink" title="盲目"></a>盲目</h4><p>大三开始了，我在辅导员和朋友的鼓舞下，进入了学生干部的生涯，当上了一名部长，也成为一名主席。开始在兼顾工作的同时，监管各种学生事务，开始盲目觉得自己很强。虽然在半年的时间，我也上架了一款app。但是殊不知，我已经开始慢慢堕落了。</p>
<h4 id="打击"><a href="#打击" class="headerlink" title="打击"></a>打击</h4><ol>
<li>第一次打击是在大三下的时候，我带着我的学弟学妹，和我的一个<strong>好基友</strong>开始了漫长的竞赛，但是没有想到的是，付出了比之前更多的努力，换来的是比之前更差的成绩。</li>
<li>第二次打击，是在一次与一位前辈的谈话中，这位前辈是从海外留学回来的，我当时的想法就是，一个项目，应该尽可能使用开源框架，来节约时间，也更方便开发者去实现，但是他给了我一个微笑，问我，“你说你很熟悉开源框架，那你读过<code>AFNetworking</code>的源码吗？”，说句实话，我当时傻了。</li>
<li>之后的打击也是数不胜数，从一些知名博客，知乎，简书，等等我也知道了很多不足。这里我也举一些例子。<ul>
<li>对<code>Objective-C</code>要有足够得了解，OC是如何基于C来进行的封装？</li>
<li>对于UI,稍微深一点的会了吗？比如，侧边栏的菜单滑出的原理？</li>
<li>动画会了吗？为什么<code>CALayer</code>会产生隐式动画？</li>
<li>各种安全机制懂了吗？</li>
<li>….</li>
</ul>
</li>
<li>我第一次看到上面这些问题的时候，我真的觉得打击很大，也是直到最后，我向各大公司投递简历的时候，简历石沉大海，我才明白了，我还差的很远。</li>
</ol>
<h4 id="醒悟"><a href="#醒悟" class="headerlink" title="醒悟"></a>醒悟</h4><p>现在也快大四开始了，相比较其他很多优秀的大四学生，我应该落后了不少，大三这一年，我不能说我完全荒废了，但确实没有什么大的成长，这个假期，我也在一家技术公司工作，在闲余时间，我也学习不少东西，我是因为热爱才去学习，我觉得现在醒悟还不算晚。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最后我想说一下，我是一个热爱编程的<strong>逗比</strong>，平时活得也比较开心，但是我是一个对<strong>应用品质</strong>很严格的人。我喜欢很多细节把控很好的应用，我也致力于打造这些细节打动用户的应用，之后我会不断更新一些我的学习心得，也会不定期奉上一些酷炫的控件。<strong>真正的学习，从现在开始</strong>。</p>
<blockquote>
<p>第一次写文章，写的不好，请勿见怪。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在我是一名准&lt;strong&gt;大四&lt;/strong&gt;计算机学院学生，我的大学并不出色，是属于我们这边比较三流的学校，大一并没有相关专业课程，因此，我的编程生涯可以算是从&lt;strong&gt;大二&lt;/strong&gt;才开始的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里还有个小插曲
    
    </summary>
    
    
  </entry>
  
</feed>
